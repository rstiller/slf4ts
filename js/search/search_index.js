var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/CassandraLogAdapter.html",[0,0.019,1,2.348]],["body/classes/CassandraLogAdapter.html",[0,0.02,1,3.251,2,0.903,3,0.61,4,0.963,5,0.41,6,0.814,7,2.806,8,0.815,9,2.498,10,0.531,11,1.422,12,0.964,13,1.071,14,0.963,15,5.061,16,1.907,17,5.061,18,1.294,19,0.867,20,3.499,21,3.968,22,0.038,23,4.436,24,2.361,25,1.071,26,4.553,27,1.422,28,1.066,29,0.768,30,1.422,31,5.061,32,3.499,33,0.902,34,5.697,35,3.198,36,2.147,37,5.697,38,3.499,39,1.227,40,0.74,41,1.294,42,0.628,43,0.74,44,0.74,45,2.498,46,2.201,47,0.994,48,0.354,49,0.819,50,0.666,51,2.556,52,2.498,53,5.061,54,4.553,55,3.499,56,4.436,57,4.436,58,4.553,59,4.553,60,3.827,61,5.36,62,3.499,63,0.533,64,3.499,65,3.499,66,1.598,67,5.061,68,5.061,69,3.499,70,0.994,71,3.499,72,3.499,73,3.499,74,3.499,75,3.499,76,4.553,77,3.499,78,3.499,79,0.903,80,3.499,81,0.021,82,0.027,83,0.021]],["title/classes/ConsoleLoggerBinding.html",[0,0.019,84,2.348]],["body/classes/ConsoleLoggerBinding.html",[0,0.028,2,1.006,3,0.522,4,1.032,5,0.456,6,0.889,10,0.591,11,1.523,12,1.014,13,1.126,14,1.032,18,1.513,19,1.169,22,0.038,25,1.215,29,0.591,33,0.847,40,1.126,42,0.673,43,0.824,44,0.824,48,0.394,49,0.912,50,0.929,63,0.571,81,0.023,82,0.029,83,0.023,84,3.801,85,2.782,86,0.824,87,3.482,88,2.208,89,1.032,90,4.405,91,1.826,92,0.824,93,3.801,94,2.547,95,2.547,96,2.547,97,4.877,98,3.897,99,1.014,100,3.897,101,3.897,102,2.463,103,2.463,104,3.349,105,2.782,106,2.782,107,3.482,108,2.782,109,1.615,110,3.482,111,2.782,112,1.968,113,2.782,114,2.782,115,2.782,116,2.782,117,1.246,118,0.394,119,2.782]],["title/classes/ConsoleLoggerImplementation.html",[0,0.019,104,2.069]],["body/classes/ConsoleLoggerImplementation.html",[0,0.023,2,0.74,3,0.384,4,0.842,5,0.336,6,0.853,8,0.696,10,0.435,11,1.243,12,0.871,13,0.968,14,0.842,16,1.724,18,1.527,19,1.154,22,0.038,25,1.166,27,1.755,28,1.441,29,0.866,30,1.679,33,0.943,39,1.045,40,1.166,41,1.3,42,0.536,43,0.606,44,0.606,48,0.29,49,0.671,50,0.758,52,2.046,63,0.63,66,1.309,70,1.404,81,0.017,82,0.023,83,0.017,86,0.842,89,1.137,90,3.295,91,1.569,92,0.606,99,0.941,104,3.536,117,0.671,120,2.046,121,2.505,122,3.388,123,0.758,124,1.5,125,2.01,126,1.724,127,1.895,128,2.866,129,3.981,130,1.65,131,1.276,132,3.786,133,1.366,134,2.866,135,1.622,136,1.366,137,3.109,138,1.542,139,1.188,140,2.866,141,2.227,142,3.981,143,3.981,144,3.295,145,2.31,146,3.981,147,3.981,148,1.131,149,2.866,150,1.366,151,1.567,152,0.983,153,1.388,154,2.866,155,0.895,156,2.866,157,1.131,158,3.295,159,1.5,160,2.866,161,1.724,162,2.866,163,5.194,164,1.609,165,1.818,166,1.65,167,2.842,168,1.609,169,5.375,170,1.309,171,2.372,172,2.372,173,2.372,174,2.866,175,1.803,176,2.866,177,3.981,178,3.981,179,2.866,180,3.981,181,2.866,182,1.609,183,3.981,184,2.046,185,2.046,186,1.609,187,2.866,188,2.866,189,2.866,190,2.866]],["title/classes/DefaultLoggerInstance.html",[0,0.019,191,1.661]],["body/classes/DefaultLoggerInstance.html",[0,0.02,2,0.395,3,0.528,4,0.524,5,0.179,6,0.856,8,0.779,10,0.232,11,0.774,12,1.102,13,1.039,14,0.66,16,2.079,18,0.704,19,1.163,22,0.038,24,2.218,25,1.185,27,1.535,28,1.375,29,0.812,30,1.494,33,0.879,35,2.214,36,1.744,39,1.012,40,1.193,41,1.652,42,0.366,43,0.66,44,0.323,47,1.2,50,0.804,51,2.37,63,0.661,70,1.622,79,0.927,81,0.009,82,0.015,83,0.009,86,0.66,89,1.084,91,1.071,92,0.323,99,0.936,109,1.026,117,1.28,118,0.427,123,1.107,124,1.486,126,1.353,127,1.634,130,1.026,131,1.436,133,0.525,135,1.2,136,1.231,138,1.436,141,1.026,148,0.435,151,1.48,152,0.525,153,1.531,155,0.478,157,1.689,159,2.04,161,1.991,165,1.426,166,1.026,182,0.858,191,2.481,192,0.772,193,1.558,194,3.277,195,2.912,196,1.121,197,2.258,198,2.258,199,2.214,200,2.481,201,2.258,202,1.487,203,1.353,204,1.529,205,2.477,206,1.558,207,1.558,208,1.558,209,1.558,210,1.294,211,1.529,212,1.529,213,1.529,214,1.529,215,1.558,216,1.529,217,1.558,218,1.529,219,1.529,220,1.529,221,1.529,222,1.529,223,1.529,224,1.529,225,1.558,226,1.529,227,1.529,228,1.529,229,1.529,230,1.529,231,1.529,232,1.486,233,2.123,234,1.558,235,1.964,236,2.258,237,1.964,238,1.558,239,1.529,240,1.558,241,1.529,242,0.85,243,0.64,244,0.806,245,0.962,246,2.214,247,1.749,248,1.842,249,2.481,250,2.481,251,2.481,252,1.018,253,1.801,254,1.801,255,0.962,256,1.558,257,2.481,258,3.009,259,1.964,260,1.964,261,0.962,262,0.962,263,0.962,264,0.962,265,0.962,266,0.962,267,2.481,268,2.481,269,0.858,270,0.962,271,0.962,272,0.962,273,0.435,274,1.964,275,2.258,276,3.038,277,0.858,278,1.964,279,0.962,280,1.639,281,0.698,282,0.962,283,0.962,284,0.962,285,2.258,286,1.558,287,0.962,288,0.858,289,0.962,290,0.962,291,1.964,292,0.962,293,0.962,294,0.962,295,0.887,296,0.858,297,1.964,298,0.962,299,1.639,300,2.258,301,0.634,302,0.962,303,0.962,304,0.962,305,0.962,306,0.858,307,0.962,308,1.558,309,1.964,310,0.962,311,0.962,312,0.962,313,0.772,314,0.634,315,0.962,316,0.858,317,0.962,318,0.962,319,1.131,320,0.962,321,0.962,322,1.558,323,0.435,324,0.962,325,1.251,326,0.962,327,0.962,328,0.634,329,0.772,330,0.962,331,0.962,332,1.558,333,1.131,334,1.131,335,0.962,336,0.962,337,0.962,338,0.962,339,0.962,340,1.251,341,2.258,342,2.258,343,2.656,344,2.258,345,2.656,346,1.964,347,2.258,348,2.258,349,0.962,350,0.962,351,1.964,352,1.558,353,1.558,354,0.962]],["title/interfaces/ILoggerInstance.html",[24,1.363,244,0.849]],["body/interfaces/ILoggerInstance.html",[0,0.021,3,0.584,4,0.555,5,0.192,6,0.744,8,0.805,10,0.249,12,1.024,13,0.791,14,0.791,16,1.643,18,0.467,19,1.093,22,0.038,24,2.254,25,1.005,27,1.429,28,1.351,29,0.695,30,1.362,33,0.849,35,2.296,36,1.999,39,1.151,40,1.151,41,1.69,42,0.384,43,0.693,44,0.347,47,1.239,50,0.83,51,2.448,63,0.669,70,1.622,79,1.056,81,0.01,82,0.015,83,0.01,86,0.555,89,1.163,91,0.9,99,0.83,109,1.087,117,1.298,118,0.441,123,1.104,124,1.541,126,0.989,127,1.695,130,0.681,131,1.404,133,0.564,135,1.239,136,1.496,138,1.388,141,0.681,148,0.467,151,1.485,153,1.465,155,0.819,157,1.703,159,2.071,161,2.026,165,1.496,166,1.087,182,0.922,191,2.4,192,0.83,193,1.034,194,2.99,195,2.354,196,1.277,197,1.034,198,1.034,199,2.296,200,1.651,201,1.034,202,1.695,203,1.541,206,1.034,207,1.034,208,1.034,209,1.034,210,1.358,215,1.651,217,1.651,225,1.651,232,1.541,233,2.126,234,1.034,235,2.061,236,2.354,237,2.061,238,1.651,240,1.651,242,0.9,243,0.677,244,0.966,245,1.651,246,2.821,247,2.126,248,2.165,249,2.573,250,2.573,251,3.161,252,1.297,253,2.295,254,2.295,255,1.651,256,1.651,257,2.573,258,3.083,259,2.061,260,2.061,261,1.034,262,1.034,263,1.034,264,1.034,265,1.034,266,1.034,267,2.573,268,2.573,269,0.922,270,1.034,271,1.034,272,1.034,273,0.467,274,2.061,275,2.354,276,3.086,277,0.922,278,2.061,279,1.034,280,1.708,281,0.75,282,1.034,283,1.034,284,1.034,285,2.354,286,1.651,287,1.034,288,0.922,289,1.034,290,1.034,291,2.061,292,1.034,293,1.034,294,1.034,295,0.931,296,0.922,297,2.061,298,1.034,299,1.708,300,2.354,301,0.681,302,1.034,303,1.034,304,1.034,305,1.034,306,0.922,307,1.034,308,1.651,309,2.061,310,1.034,311,1.034,312,1.034,313,0.83,314,0.681,315,1.034,316,0.922,317,1.034,318,1.034,319,1.198,320,1.034,321,1.034,322,1.651,323,0.467,324,1.034,325,1.325,326,1.034,327,1.034,328,0.681,329,0.83,330,1.034,331,1.034,332,1.651,333,1.198,334,1.198,335,1.034,336,1.034,337,1.034,338,1.034,339,1.034,340,1.325,341,2.354,342,2.354,343,2.743,344,2.354,345,2.743,346,2.061,347,2.354,348,2.354,349,1.034,350,1.034,351,2.061,352,1.651,353,1.651,354,1.034,355,0.922,356,1.643,357,1.643,358,1.643,359,1.643,360,1.643,361,1.643,362,1.643,363,1.643]],["title/classes/Log4JSLoggerBinding.html",[0,0.019,364,2.348]],["body/classes/Log4JSLoggerBinding.html",[0,0.028,2,1.008,3,0.523,4,1.033,5,0.457,6,0.89,10,0.593,11,1.525,12,1.015,13,1.127,14,1.033,18,1.514,19,1.17,22,0.038,25,1.216,29,0.593,33,0.847,40,1.127,42,0.673,43,0.826,44,0.826,48,0.395,49,0.914,50,0.93,63,0.572,81,0.023,82,0.029,83,0.023,86,0.826,88,2.209,89,1.033,91,1.828,92,0.826,93,3.805,94,2.549,95,2.549,96,2.549,99,1.015,102,2.466,103,2.466,105,2.789,106,2.789,107,3.487,108,2.789,109,1.619,110,3.487,111,2.789,112,1.972,113,2.789,114,2.789,115,2.789,116,2.789,117,1.247,118,0.395,119,2.789,364,3.805,365,2.789,366,2.691,367,4.885,368,3.906,369,3.906,370,3.906,371,3.353]],["title/classes/Log4JSLoggerImplementation.html",[0,0.019,371,2.069]],["body/classes/Log4JSLoggerImplementation.html",[0,0.024,2,0.787,3,0.556,4,0.878,5,0.357,6,0.866,8,0.633,10,0.462,11,1.297,12,1.043,13,0.999,14,0.878,16,1.78,19,1.153,22,0.038,25,1.185,27,1.75,28,1.461,29,0.866,30,1.71,33,0.956,39,0.645,40,1.158,41,1.18,42,0.553,43,1.123,44,0.645,48,0.308,49,0.713,50,0.791,63,0.692,70,1.18,79,0.787,81,0.018,82,0.024,83,0.018,86,0.645,89,0.878,91,1.62,92,0.645,99,0.966,117,1.105,118,0.477,121,2.612,123,1.043,124,1.78,125,2.097,126,1.78,127,1.957,131,1.473,133,1.045,135,1.441,138,1.556,139,1.263,145,1.539,148,1.18,150,1.045,151,1.556,152,1.045,153,1.414,155,0.952,157,1.441,165,1.391,167,2.176,170,1.391,184,2.176,185,2.176,186,1.711,196,0.952,202,1.263,203,1.148,277,1.711,280,1.391,281,1.391,329,2.097,366,2.385,371,2.972,372,1.917,373,2.972,374,3.909,375,0.952,376,1.957,377,3.047,378,3.047,379,2.522,380,3.047,381,3.047,382,3.047,383,3.047,384,3.047,385,1.711,386,2.522,387,2.522,388,2.522,389,2.522,390,2.522,391,3.047,392,3.047,393,3.047,394,3.047,395,3.047,396,3.047,397,4.198,398,2.522,399,2.522,400,3.047,401,2.522,402,2.522,403,3.047,404,2.522,405,2.176,406,3.047,407,3.047,408,3.047,409,3.047,410,3.047,411,2.522,412,3.047,413,2.522]],["title/interfaces/LoggerBinding.html",[88,1.239,244,0.849]],["body/interfaces/LoggerBinding.html",[0,0.02,3,0.328,4,0.753,5,0.417,6,0.699,8,0.617,10,0.372,12,0.931,13,0.518,14,0.753,18,0.696,19,0.799,22,0.038,25,0.887,28,1.373,29,0.637,33,0.95,39,0.887,40,1.164,41,1.012,42,0.539,43,0.518,44,0.518,48,0.36,50,1.003,63,0.67,66,1.626,70,0.696,81,0.014,82,0.021,83,0.014,86,0.518,88,2.195,89,1.141,94,2.103,95,2.103,96,2.103,99,1.064,102,1.798,103,1.798,117,1.195,118,0.36,123,1.141,130,1.015,131,1.189,133,0.84,135,1.39,136,1.851,137,1.541,138,1.478,139,1.015,141,1.015,145,1.237,148,0.696,150,1.221,151,1.309,152,0.84,153,1.189,155,0.765,157,1.39,159,2.195,161,2.157,164,1.999,168,1.375,170,1.626,210,1.738,232,0.923,233,1.738,242,1.917,243,0.632,244,1.189,247,1.015,248,1.015,252,1.318,253,1.119,254,1.119,273,0.696,295,1.497,319,2.405,323,0.696,333,1.119,334,1.119,355,1.375,375,0.765,414,1.375,415,2.45,416,2.45,417,3.288,418,2.45,419,2.325,420,1.749,421,2.897,422,1.749,423,2.24,424,1.749,425,2.995,426,1.749,427,1.798,428,1.541,429,1.541,430,2.542,431,2.542,432,1.749,433,1.749,434,2.542,435,1.749,436,1.749,437,1.541,438,1.749,439,1.541,440,2.995,441,2.24,442,1.749,443,1.541,444,1.475,445,2.542,446,2.995,447,1.749,448,1.541,449,2.639,450,1.749,451,1.749,452,1.749,453,1.749,454,2.995,455,1.749,456,1.749,457,1.749,458,1.749,459,1.749,460,1.749,461,1.749,462,1.749,463,3.644,464,1.749,465,1.749,466,1.749,467,1.749,468,1.749,469,1.749,470,2.24,471,1.749,472,2.542,473,1.749,474,2.542,475,1.749,476,2.542,477,1.749,478,1.749,479,1.749,480,1.541,481,1.749,482,1.749,483,1.749,484,1.749,485,1.749,486,1.749,487,1.749,488,1.749,489,1.749,490,1.749,491,1.749,492,1.541,493,1.749,494,1.749,495,1.749,496,1.749,497,1.749,498,1.749,499,1.749,500,1.749,501,1.749,502,1.749,503,1.749,504,1.749,505,1.749]],["title/classes/LoggerBindings.html",[0,0.019,242,1.128]],["body/classes/LoggerBindings.html",[0,0.019,2,0.571,3,0.297,4,0.699,5,0.463,6,0.796,8,0.588,10,0.336,11,1.032,12,1.079,13,0.836,14,0.699,18,0.939,19,0.998,22,0.038,25,1.079,27,1.465,28,1.383,29,0.813,30,1.465,33,0.951,39,0.836,40,1.171,41,0.939,42,0.514,43,0.468,44,0.468,48,0.399,50,0.998,63,0.657,66,1.805,70,0.629,81,0.013,82,0.019,83,0.013,86,0.836,88,2.227,89,1.041,92,0.468,94,1.011,95,1.011,96,1.011,99,1.02,102,1.668,103,1.668,117,1.152,118,0.334,123,1.12,130,1.369,131,1.211,133,0.759,135,1.333,136,1.688,137,1.392,138,1.448,139,0.917,141,0.917,145,1.118,148,0.629,150,1.133,151,1.333,152,0.759,153,1.132,155,0.691,157,1.246,159,2.156,161,2.113,164,1.855,168,1.242,170,1.011,210,1.638,232,0.834,233,1.369,242,1.963,243,0.571,244,1.132,247,1.369,248,1.369,252,1.353,253,1.011,254,1.011,273,0.939,295,1.523,319,2.588,323,0.629,333,1.011,334,1.011,375,1.235,376,0.917,414,1.242,417,2.359,419,1.668,420,1.58,421,3.096,422,1.58,423,2.487,424,1.58,425,3.35,426,1.58,427,1.668,428,1.392,429,1.392,430,2.359,431,2.359,432,2.359,433,2.359,434,3.131,435,2.359,436,2.359,437,2.079,438,2.359,439,2.079,440,3.35,441,2.487,442,2.359,443,2.079,444,1.817,445,3.131,446,3.35,447,2.359,448,2.079,449,2.952,450,2.359,451,2.359,452,2.359,453,2.359,454,3.35,455,1.58,456,1.58,457,1.58,458,1.58,459,1.58,460,1.58,461,1.58,462,1.58,463,3.641,464,1.58,465,1.58,466,1.58,467,1.58,468,1.58,469,1.58,470,2.759,471,2.823,472,2.359,473,1.58,474,2.359,475,1.58,476,2.359,477,1.58,478,1.58,479,1.58,480,2.079,481,3.131,482,1.58,483,2.823,484,1.58,485,1.58,486,1.58,487,1.58,488,1.58,489,2.823,490,2.359,491,1.58,492,1.392,493,1.58,494,1.58,495,1.58,496,1.58,497,1.58,498,1.58,499,1.58,500,1.58,501,1.58,502,2.823,503,1.58,504,1.58,505,1.58,506,2.213,507,3.304,508,2.213,509,2.213,510,2.213,511,2.213,512,2.213,513,2.213,514,2.213,515,2.213,516,2.213]],["title/classes/LoggerConfigurationImpl.html",[0,0.019,517,2.069]],["body/classes/LoggerConfigurationImpl.html",[0,0.016,2,0.48,3,0.537,4,0.612,5,0.218,6,0.847,8,0.776,10,0.282,11,0.903,12,1.026,13,1.078,14,0.612,19,1.145,22,0.038,23,3.592,25,1.169,27,1.627,28,1.466,29,0.855,30,1.549,33,0.933,39,1.237,40,1.122,42,0.339,43,1.078,44,0.393,46,2.52,50,0.826,56,2.393,57,2.393,60,2.065,63,0.562,66,1.321,70,1.306,79,0.48,81,0.011,82,0.017,83,0.011,86,1.015,89,1.015,92,0.393,117,1.242,118,0.552,123,1.158,125,1.46,126,1.338,131,1.529,135,1.508,136,0.992,138,1.602,148,0.822,150,1.932,151,1.306,152,0.637,153,1.495,159,2.182,161,1.963,164,1.623,166,1.904,170,0.849,196,0.58,199,1.993,202,0.77,203,0.7,232,1.509,243,0.48,247,2.159,269,1.993,280,1.829,281,1.829,288,1.623,296,2.249,306,2.249,316,2.249,323,0.528,325,1.46,340,2.023,375,1.786,376,2.199,385,1.993,427,1.793,428,2.233,429,3.018,517,3.762,518,1.043,519,3.55,520,4.798,521,2.892,522,3.55,523,3.55,524,3.55,525,4.006,526,3.55,527,1.858,528,1.858,529,1.858,530,1.858,531,2.892,532,1.858,533,1.858,534,1.858,535,2.892,536,1.858,537,1.858,538,2.892,539,2.065,540,2.065,541,1.858,542,1.858,543,4.006,544,4.962,545,5.39,546,4.106,547,4.962,548,4.962,549,1.858,550,1.858,551,1.858,552,4.006,553,4.006,554,1.858,555,2.892,556,1.858,557,1.858,558,1.858,559,1.858,560,1.538,561,2.892,562,1.858,563,1.858,564,3.55,565,1.858,566,1.858,567,1.858,568,1.858,569,2.892,570,2.892,571,1.858,572,1.858,573,1.858,574,1.858,575,1.858,576,2.892,577,1.858,578,1.858,579,1.858]],["title/classes/LoggerFactory.html",[0,0.019,47,0.935]],["body/classes/LoggerFactory.html",[0,0.021,2,0.407,3,0.427,4,0.537,5,0.185,6,0.797,8,0.764,10,0.239,11,0.793,12,1.123,13,0.905,14,0.674,16,1.613,18,0.448,19,1.086,22,0.038,24,2.233,25,1.093,27,1.251,28,1.361,29,0.734,30,1.251,33,0.866,35,2.403,36,1.764,39,0.99,40,1.126,41,1.611,42,0.373,43,0.847,44,0.333,47,1.279,50,0.815,51,2.403,63,0.664,70,1.548,79,0.655,81,0.009,82,0.015,83,0.009,86,0.773,89,1.093,91,0.871,92,0.333,99,0.857,109,1.32,117,1.288,118,0.501,123,1.144,124,0.956,126,0.956,127,1.66,130,0.653,131,1.444,133,0.541,135,1.038,136,1.468,138,1.42,141,0.653,148,0.448,151,1.548,153,1.444,155,0.793,157,1.71,159,2.053,161,2.006,165,1.455,166,1.514,182,0.885,191,2.44,192,0.796,193,0.992,194,2.945,195,2.298,196,0.793,197,0.992,198,0.992,199,1.425,200,2.52,201,0.992,202,1.052,203,0.956,206,0.992,207,0.992,208,0.992,209,0.992,210,1.052,215,0.992,217,0.992,225,0.992,232,1.613,233,2.28,234,0.992,235,1.597,236,2.298,237,1.597,238,0.992,240,0.992,242,0.871,243,0.655,244,0.823,245,0.992,246,2.248,247,1.865,248,1.94,249,2.52,250,2.52,251,2.52,252,1.034,253,1.829,254,1.829,255,0.992,256,1.597,257,2.52,258,3.04,259,2.005,260,2.005,261,0.992,262,0.992,263,0.992,264,0.992,265,0.992,266,0.992,267,2.52,268,2.52,269,0.885,270,0.992,271,0.992,272,0.992,273,0.721,274,2.693,275,2.945,276,3.392,277,1.789,278,2.005,279,0.992,280,1.668,281,0.72,282,0.992,283,0.992,284,0.992,285,2.298,286,1.597,287,0.992,288,1.425,289,1.597,290,1.597,291,2.298,292,1.597,293,1.597,294,1.597,295,1.038,296,1.789,297,2.52,298,0.992,299,2.138,300,2.945,301,1.052,302,1.597,303,1.597,304,1.597,305,1.597,306,1.425,307,1.597,308,1.597,309,2.005,310,0.992,311,0.992,312,2.005,313,1.282,314,1.32,315,2.005,316,1.425,317,2.005,318,2.298,319,1.159,320,0.992,321,0.992,322,1.597,323,0.448,324,0.992,325,1.282,326,0.992,327,0.992,328,0.653,329,0.796,330,0.992,331,0.992,332,1.597,333,1.159,334,1.159,335,0.992,336,0.992,337,0.992,338,0.992,339,2.005,340,1.845,341,2.298,342,2.298,343,2.693,344,2.298,345,2.693,346,2.005,347,2.298,348,2.298,349,0.992,350,2.005,351,2.005,352,1.597,353,1.597,354,0.992,375,1.337,376,1.774,580,1.576,581,1.576,582,1.576,583,1.576,584,1.576,585,1.576,586,1.576,587,1.576,588,1.576,589,1.576,590,1.576,591,1.576,592,1.576,593,1.576,594,1.576,595,1.576]],["title/interfaces/LoggerImplementation.html",[99,0.626,244,0.849]],["body/interfaces/LoggerImplementation.html",[0,0.019,3,0.295,4,0.695,5,0.385,6,0.745,8,0.73,10,0.334,12,0.891,13,0.465,14,0.695,18,0.625,19,0.75,22,0.038,25,0.989,27,1.589,28,1.437,29,0.827,30,1.461,33,0.954,39,1.038,40,1.169,41,1.242,42,0.512,43,0.465,44,0.465,48,0.332,50,0.969,63,0.656,66,1.798,70,0.934,81,0.013,82,0.019,83,0.013,86,1.038,88,2.133,89,1.152,94,1.004,95,1.004,96,1.004,99,1.037,102,1.66,103,1.66,117,1.149,118,0.442,123,1.164,124,1.239,125,1.66,126,1.239,127,1.362,130,0.911,131,1.267,133,1.128,135,1.547,136,1.684,137,2.068,138,1.555,139,1.362,141,1.362,145,1.66,148,0.934,150,1.351,151,1.446,152,1.128,153,1.314,155,1.027,157,1.446,159,2.153,161,2.11,164,1.845,168,1.234,170,1.004,210,2.034,232,1.239,233,1.362,242,1.868,243,0.567,244,1.128,247,0.911,248,0.911,252,1.406,253,1.501,254,1.501,273,0.625,295,1.395,319,2.323,323,0.625,333,1.004,334,1.004,355,1.234,375,0.686,414,1.234,417,2.347,419,1.66,420,2.347,421,3.088,422,2.347,423,2.477,424,2.347,425,3.12,426,2.347,427,2.207,428,2.068,429,2.068,430,3.12,431,3.12,432,1.569,433,1.569,434,2.347,435,1.569,436,1.569,437,1.383,438,1.569,439,1.383,440,2.811,441,2.068,442,1.569,443,1.383,444,1.362,445,2.347,446,2.811,447,1.569,448,1.383,449,2.477,450,1.569,451,1.569,452,1.569,453,1.569,454,2.811,455,1.569,456,1.569,457,1.569,458,1.569,459,1.569,460,1.569,461,1.569,462,1.569,463,3.505,464,1.569,465,1.569,466,1.569,467,1.569,468,1.569,469,1.569,470,2.068,471,1.569,472,2.347,473,1.569,474,2.347,475,1.569,476,2.347,477,1.569,478,1.569,479,1.569,480,1.383,481,1.569,482,1.569,483,1.569,484,1.569,485,1.569,486,1.569,487,1.569,488,1.569,489,1.569,490,1.569,491,1.569,492,1.383,493,1.569,494,1.569,495,1.569,496,1.569,497,1.569,498,1.569,499,1.569,500,1.569,501,1.569,502,1.569,503,1.569,504,1.569,505,1.569,596,2.198,597,2.198,598,2.198,599,2.198,600,2.198]],["title/classes/NullLoggerImplementation.html",[0,0.019,313,1.661]],["body/classes/NullLoggerImplementation.html",[0,0.022,2,0.44,3,0.45,4,0.572,5,0.2,6,0.673,8,0.781,10,0.259,12,1.033,13,0.808,14,0.71,16,1.815,18,0.485,19,1.14,22,0.038,24,2.247,25,0.881,27,1.45,28,1.394,29,0.705,30,1.301,33,0.913,35,2.145,36,1.815,39,1.019,40,1.116,41,1.641,42,0.393,43,0.71,44,0.361,47,1.259,50,0.844,51,2.338,63,0.673,70,1.588,79,0.698,81,0.01,82,0.016,83,0.01,86,0.361,89,1.097,91,1.152,92,0.361,99,0.884,109,1.12,117,1.308,118,0.448,123,1.105,124,1.44,125,1.365,126,1.44,127,1.726,130,0.707,131,1.4,133,0.927,135,1.41,136,1.311,138,1.483,139,0.707,141,0.707,148,0.768,150,0.585,151,1.541,152,0.585,153,1.491,155,0.844,157,1.701,159,2.087,161,2.043,165,1.745,166,1.12,182,0.957,191,2.432,192,0.861,193,1.073,194,3.03,195,2.404,196,0.844,197,1.073,198,1.073,199,1.517,200,1.701,201,1.073,202,1.12,203,1.019,206,1.073,207,1.073,208,1.073,209,1.073,210,1.12,215,1.073,217,1.073,225,1.073,232,1.44,233,2.106,234,1.073,235,1.701,236,2.113,237,1.701,238,1.073,240,1.073,242,0.927,243,0.698,244,0.867,245,1.073,246,2.338,247,1.836,248,1.924,249,2.621,250,2.621,251,2.621,252,1.075,253,1.902,254,1.902,255,1.073,256,1.701,257,2.621,258,3.121,259,2.113,260,2.113,261,1.073,262,1.073,263,1.073,264,1.073,265,1.073,266,1.073,267,2.621,268,2.621,269,0.957,270,1.073,271,1.073,272,1.073,273,0.485,274,2.113,275,2.404,276,3.109,277,0.957,278,2.113,279,1.073,280,1.745,281,0.779,282,1.073,283,1.073,284,1.073,285,2.404,286,1.701,287,1.073,288,0.957,289,1.073,290,1.073,291,2.113,292,1.073,293,1.073,294,1.073,295,0.954,296,0.957,297,2.113,298,1.073,299,1.745,300,2.404,301,0.707,302,1.073,303,1.073,304,1.073,305,1.073,306,0.957,307,1.073,308,1.701,309,2.113,310,1.073,311,1.073,312,1.073,313,1.365,314,0.707,315,1.073,316,0.957,317,1.073,318,1.073,319,1.234,320,1.073,321,1.073,322,1.701,323,0.485,324,1.073,325,1.365,326,1.073,327,1.073,328,0.707,329,0.861,330,1.073,331,1.073,332,1.701,333,1.234,334,1.234,335,1.073,336,1.073,337,1.073,338,1.073,339,1.073,340,1.365,341,2.404,342,2.404,343,2.788,344,2.404,345,2.788,346,2.113,347,2.404,348,2.404,349,1.073,350,1.073,351,2.113,352,1.701,353,1.701,354,1.073,375,0.533,601,1.705,602,1.705,603,1.705,604,1.705,605,1.705,606,1.705]],["title/classes/WinstonLoggerBinding.html",[0,0.019,607,2.348]],["body/classes/WinstonLoggerBinding.html",[0,0.028,2,1.008,3,0.523,4,1.033,5,0.457,6,0.89,10,0.593,11,1.525,12,1.015,13,1.127,14,1.033,18,1.514,19,1.17,22,0.038,25,1.216,29,0.593,33,0.847,40,1.127,42,0.673,43,0.826,44,0.826,48,0.395,49,0.914,50,0.93,63,0.572,81,0.023,82,0.029,83,0.023,86,0.826,88,2.209,89,1.033,91,1.828,92,0.826,93,3.805,94,2.549,95,2.549,96,2.549,99,1.015,102,2.466,103,2.466,105,2.789,106,2.789,107,3.487,108,2.789,109,1.619,110,3.487,111,2.789,112,1.972,113,2.789,114,2.789,115,2.789,116,2.789,117,1.247,118,0.395,119,2.789,607,3.805,608,2.789,609,2.691,610,4.885,611,3.906,612,3.906,613,3.906,614,3.353]],["title/classes/WinstonLoggerImplementation.html",[0,0.019,614,2.069]],["body/classes/WinstonLoggerImplementation.html",[0,0.023,2,0.736,3,0.532,4,0.839,5,0.334,6,0.852,8,0.611,10,0.433,11,1.239,12,1.022,13,0.965,14,0.839,16,1.719,19,1.143,22,0.038,25,1.164,27,1.719,28,1.45,29,0.852,30,1.676,33,0.955,39,0.603,40,1.135,41,1.127,42,0.578,43,1.096,44,0.603,48,0.288,49,0.667,50,0.755,52,2.035,63,0.668,70,1.127,79,1.024,81,0.017,82,0.023,83,0.017,86,0.603,89,0.839,91,1.565,92,0.603,99,0.939,117,1.067,118,0.461,121,2.495,123,0.755,124,1.719,125,2.003,126,1.719,127,1.89,131,1.472,133,0.978,135,1.401,138,1.541,139,1.181,145,1.44,148,1.127,150,0.978,151,1.525,152,0.978,153,1.385,155,0.89,157,1.127,158,3.282,165,1.811,166,1.644,167,2.832,170,1.302,171,2.359,172,2.359,173,2.359,184,2.035,185,2.035,186,1.6,196,0.89,203,1.074,280,1.302,281,1.302,323,0.81,373,2.869,374,3.775,375,0.89,376,1.181,379,2.359,385,1.6,386,2.359,387,2.359,388,2.359,389,2.359,390,2.359,397,3.775,398,4.556,399,2.359,401,2.359,402,2.359,404,3.282,411,2.359,413,2.359,609,2.49,614,2.869,615,1.794,616,2.851,617,2.851,618,2.851,619,4.561,620,2.851,621,2.851,622,2.851,623,2.851,624,2.851,625,2.851,626,3.967,627,2.851,628,2.851,629,2.359,630,5.505,631,2.851,632,2.851,633,5.183,634,2.851,635,2.851,636,2.851,637,2.851,638,2.851,639,2.851,640,2.851,641,2.851,642,2.851,643,2.851,644,2.851,645,2.851,646,2.851,647,2.851]],["title/coverage.html",[648,3.121]],["body/coverage.html",[0,0.035,1,2.921,5,0.479,6,0.957,7,2.066,8,0.548,9,2.921,22,0.037,24,1.696,29,0.621,47,1.163,81,0.024,82,0.03,83,0.024,84,2.921,85,2.921,88,1.542,99,0.779,104,2.574,118,0.413,120,2.921,191,2.066,192,2.866,242,1.404,243,1.056,244,1.405,313,2.066,323,1.546,364,2.921,365,2.921,371,2.574,372,3.162,385,2.822,414,3.054,439,3.423,517,2.574,518,2.822,607,2.921,608,2.921,614,2.574,615,3.162,648,2.921,649,3.386,650,4.092,651,3.386,652,4.092,653,4.092,654,4.697,655,3.386,656,4.092,657,4.092,658,4.092,659,4.092,660,4.092,661,4.092,662,4.092,663,4.092,664,5.676,665,5.676,666,4.092,667,4.092,668,3.386,669,4.092,670,4.16,671,5.027,672,5.027,673,3.386,674,3.386]],["title/miscellaneous/enumerations.html",[675,1.766,676,3.247]],["body/miscellaneous/enumerations.html",[3,0.647,6,0.733,10,0.733,22,0.034,79,1.247,81,0.028,82,0.033,83,0.028,153,1.507,196,1.508,202,2.001,203,1.82,323,1.372,376,2.001,518,2.711,560,3.997,675,3.038,676,3.997,677,3.997]],["title/index.html",[10,0.426,678,2.323,679,2.323]],["body/index.html",[7,2.744,8,0.76,21,3.583,22,0.036,45,2.914,48,0.613,49,1.175,81,0.024,82,0.029,83,0.024,86,0.863,87,2.914,118,0.412,122,3.051,123,1.035,168,2.291,244,1.054,252,1.296,295,1.544,366,2.744,449,3.157,546,3.378,609,2.744,680,3.378,681,2.939,682,4.082,683,4.082,684,4.082,685,3.419,686,4.082,687,4.082,688,3.378,689,4.082,690,4.048,691,3.583,692,5.435,693,3.583,694,4.082,695,4.082,696,4.082,697,5.019,698,4.082,699,4.082,700,4.082,701,5.822,702,4.082,703,4.082,704,5.822,705,5.019,706,4.082,707,4.082,708,2.568,709,4.082,710,4.082,711,5.019,712,4.082,713,4.082,714,4.153,715,5.67,716,4.082,717,4.082,718,4.082,719,5.67,720,4.082,721,4.082,722,5.019,723,5.435,724,5.435,725,4.082,726,4.082,727,4.082,728,4.082,729,4.082,730,4.082,731,1.864]],["title/license.html",[678,2.323,679,2.323,732,2.004]],["body/license.html",[22,0.031,81,0.026,82,0.031,83,0.026,132,3.599,340,2.196,480,3.281,492,2.736,649,3.599,714,3.599,731,1.986,732,3.105,733,5.588,734,4.349,735,5.216,736,4.349,737,4.349,738,4.349,739,4.349,740,4.349,741,4.349,742,6.174,743,4.349,744,4.349,745,4.624,746,4.349,747,5.216,748,4.349,749,4.349,750,4.317,751,4.349,752,4.349,753,4.349,754,4.349,755,4.349,756,4.349,757,5.216,758,4.349,759,4.349,760,4.349,761,4.349,762,4.349,763,4.349,764,3.599,765,5.216,766,5.216,767,4.349,768,4.349,769,4.349,770,4.349,771,4.349,772,4.349,773,4.349,774,4.349,775,4.349,776,4.349,777,4.349,778,4.349,779,4.349,780,4.349,781,4.349,782,4.349,783,4.349,784,4.349,785,4.349,786,4.349,787,4.349,788,4.349,789,4.349,790,4.349,791,4.349,792,4.349,793,4.349,794,3.599,795,4.349,796,4.349]],["title/modules.html",[685,2.75]],["body/modules.html",[22,0.033,81,0.029,82,0.033,83,0.029,685,3.119]],["title/overview.html",[797,3.618]],["body/overview.html",[2,1.272,22,0.033,81,0.029,82,0.033,83,0.029,186,2.766,355,2.766,670,4.077,797,4.077]],["title/unit-test.html",[798,2.945,799,2.239]],["body/unit-test.html",[5,0.47,7,2.025,8,0.537,9,2.863,22,0.038,81,0.024,82,0.029,83,0.024,85,2.863,118,0.405,120,2.863,192,2.025,365,2.863,372,2.522,414,2.251,518,2.251,608,2.863,615,2.522,648,2.863,651,3.318,654,5.22,655,4.462,668,4.108,673,3.318,674,3.318,798,3.318,799,2.522,800,4.01,801,4.01,802,4.01,803,6.133,804,4.01,805,4.01,806,4.01,807,4.01,808,4.01,809,5.982,810,4.964,811,5.392,812,4.01,813,4.01,814,4.01,815,4.964,816,4.964,817,4.01,818,4.01,819,4.01,820,4.964,821,4.01,822,4.01,823,4.01,824,5.982,825,5.392,826,4.964,827,4.01,828,4.964,829,4.01,830,4.01,831,4.01,832,4.964,833,4.01,834,4.01,835,4.01,836,4.01]],["title/miscellaneous/variables.html",[675,1.766,837,3.247]],["body/miscellaneous/variables.html",[6,0.874,10,0.709,22,0.037,29,0.826,33,0.826,81,0.027,82,0.032,83,0.027,118,0.472,131,1.207,243,1.405,372,2.94,375,1.852,376,2.386,385,3.33,427,2.36,517,2.94,518,2.624,615,2.94,675,2.94,677,3.868,837,3.868,838,4.674,839,4.674]],["title/additional-documentation/slf4ts-api.html",[48,0.247,49,0.573,444,1.014,840,1.374]],["body/additional-documentation/slf4ts-api.html",[0,0.019,3,0.442,5,0.386,8,0.731,12,0.628,16,1.243,19,0.628,22,0.038,28,1.339,33,0.882,36,1.243,39,1.108,41,0.938,42,0.576,46,2.076,47,0.938,48,0.566,49,1.226,50,0.834,60,2.356,63,0.513,66,1.507,79,1.353,81,0.019,82,0.026,83,0.019,87,2.356,88,1.651,89,1.04,92,0.927,94,2,95,2,96,2,99,0.936,121,2.076,122,1.852,123,1.089,124,1.243,135,1.245,136,1.503,138,1.518,139,1.367,148,0.938,150,1.797,151,1.397,152,1.132,153,1.353,155,1.03,157,1.245,175,2.076,186,1.852,196,1.368,202,1.367,203,1.243,232,2.112,242,1.503,243,0.852,244,1.353,246,1.852,252,1.408,273,1.397,276,1.852,295,1.593,301,1.367,314,1.367,323,0.938,325,1.666,328,1.367,329,1.666,355,1.852,366,1.666,373,3.296,375,1.03,376,2.323,421,3.094,441,2.756,443,2.076,448,2.756,539,2.356,540,2.356,609,1.666,629,2.731,680,2.731,681,2.212,685,2.076,688,2.731,691,4.273,693,3.128,731,1.507,745,3.625,841,3.3,842,3.3,843,3.3,844,3.3,845,3.3,846,3.3,847,3.3,848,3.3,849,3.3,850,3.3,851,1.852,852,5.453,853,3.3,854,3.3,855,3.3,856,3.3,857,3.3,858,3.3,859,3.3,860,3.3,861,3.3,862,4.381,863,4.381,864,3.3,865,4.381,866,2.731,867,3.3,868,3.3,869,3.3,870,3.3,871,3.3,872,3.3,873,3.3,874,2.076,875,1.852,876,5.605,877,2.731,878,3.3,879,3.3,880,3.3,881,3.3,882,3.3,883,3.3,884,3.3,885,3.3,886,4.381,887,3.3,888,3.3,889,2.731,890,3.3,891,4.07,892,2.731]],["title/additional-documentation/slf4ts-cassandra-log-adapter.html",[7,0.984,8,0.261,48,0.197,444,0.808,690,1.391,840,1.094]],["body/additional-documentation/slf4ts-cassandra-log-adapter.html",[7,2.98,8,0.693,21,4.28,22,0.037,24,2.301,28,1.003,33,0.65,42,0.502,45,3.059,46,2.695,47,1.217,48,0.582,49,1.003,63,0.65,81,0.025,82,0.03,83,0.025,118,0.561,123,1.155,131,1.523,138,1.106,144,3.546,210,1.775,252,1.433,273,1.217,423,2.695,437,2.695,681,2.163,690,4.116,693,3.059,731,1.956,750,3.546,851,2.405,866,3.546,875,2.405,877,3.546,893,4.285,894,4.285,895,4.285,896,5.552,897,4.285,898,4.285,899,4.285,900,4.285,901,5.17,902,4.285,903,4.285,904,3.546,905,4.285,906,4.285,907,4.285,908,4.285,909,4.285]],["title/additional-documentation/slf4ts-console.html",[48,0.247,122,1.374,444,1.014,840,1.374]],["body/additional-documentation/slf4ts-console.html",[3,0.602,22,0.037,36,2.005,42,0.527,47,1.278,48,0.604,49,1.052,63,0.527,79,1.161,81,0.026,82,0.031,83,0.026,92,1.199,112,2.27,118,0.454,122,3.181,175,2.828,252,1.161,273,1.278,295,1.278,299,2.43,301,1.863,314,1.863,328,1.863,419,2.687,681,2.27,708,2.828,731,2.053,732,3.21,799,2.828,851,2.524,874,3.347,875,2.524,910,3.21,911,3.21,912,3.21,913,3.799,914,3.21,915,4.496,916,4.496,917,4.496,918,3.721,919,4.496,920,4.496,921,4.496]],["title/additional-documentation/slf4ts-log4js.html",[48,0.247,366,1.236,444,1.014,840,1.374]],["body/additional-documentation/slf4ts-log4js.html",[3,0.546,5,0.477,22,0.038,29,0.761,36,1.89,39,0.862,42,0.587,47,1.158,48,0.573,49,0.954,63,0.477,79,1.052,81,0.024,82,0.029,83,0.024,92,1.149,112,2.058,118,0.412,123,0.776,157,1.158,166,1.689,196,1.273,233,1.689,243,1.052,252,1.052,273,1.158,295,1.158,299,2.29,301,1.689,314,1.689,328,1.689,366,2.938,375,1.566,405,3.878,419,2.532,540,2.91,681,2.058,708,2.564,731,1.861,764,3.373,794,4.15,799,2.564,851,2.288,874,3.155,875,2.288,904,3.373,910,2.91,911,2.91,912,2.91,913,4.046,914,2.91,918,3.373,922,5.015,923,4.076,924,3.373,925,4.076,926,4.076,927,4.076,928,4.076,929,4.076,930,4.076,931,4.076,932,4.076,933,4.076,934,4.076,935,4.076,936,4.076,937,4.076,938,4.076,939,4.076,940,4.076,941,4.076,942,4.076,943,4.076,944,4.076]],["title/additional-documentation/slf4ts-winston.html",[48,0.247,444,1.014,609,1.236,840,1.374]],["body/additional-documentation/slf4ts-winston.html",[5,0.495,8,0.567,22,0.037,36,1.593,39,0.894,42,0.601,47,1.201,48,0.58,49,0.989,63,0.601,79,1.091,81,0.025,82,0.03,83,0.025,92,1.168,109,1.752,112,2.135,118,0.58,123,0.976,150,1.45,175,2.66,196,1.32,243,1.091,248,1.752,252,1.091,273,1.201,295,1.201,299,1.93,301,1.752,314,1.752,328,1.752,373,2.66,405,3.661,419,2.135,427,2.135,470,2.66,539,3.018,609,3.018,681,2.135,691,3.661,708,2.66,731,1.93,851,2.373,874,2.66,875,2.373,889,3.499,891,4.244,892,3.499,910,3.018,911,3.018,912,3.018,913,3.018,914,3.018,924,4.244,945,4.228,946,4.228,947,4.228,948,4.228,949,4.228,950,4.228,951,4.228,952,4.228,953,4.228,954,4.228,955,4.228,956,4.228,957,4.228,958,4.228,959,4.228,960,4.228,961,4.228,962,4.228,963,4.228]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["0",{"_index":323,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{}}}],["0/1",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":918,"title":{},"body":{"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["01t11:22:33.444",{"_index":930,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["01t12:00:00.999z",{"_index":919,"title":{},"body":{"additional-documentation/slf4ts-console.html":{}}}],["1",{"_index":329,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["1.0.0",{"_index":874,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["1/1",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":814,"title":{},"body":{"unit-test.html":{}}}],["10/15",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":654,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["12",{"_index":670,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["127.0.0.1:9042",{"_index":898,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["13/15",{"_index":806,"title":{},"body":{"unit-test.html":{}}}],["13/18",{"_index":834,"title":{},"body":{"unit-test.html":{}}}],["14",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":807,"title":{},"body":{"unit-test.html":{}}}],["14/17",{"_index":822,"title":{},"body":{"unit-test.html":{}}}],["16",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":824,"title":{},"body":{"unit-test.html":{}}}],["17/21",{"_index":812,"title":{},"body":{"unit-test.html":{}}}],["2",{"_index":629,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["2/2",{"_index":825,"title":{},"body":{"unit-test.html":{}}}],["2/4",{"_index":829,"title":{},"body":{"unit-test.html":{}}}],["20/31",{"_index":819,"title":{},"body":{"unit-test.html":{}}}],["2017",{"_index":917,"title":{},"body":{"additional-documentation/slf4ts-console.html":{}}}],["2018",{"_index":734,"title":{},"body":{"license.html":{}}}],["2020",{"_index":929,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["24/27",{"_index":820,"title":{},"body":{"unit-test.html":{}}}],["25/25",{"_index":826,"title":{},"body":{"unit-test.html":{}}}],["29/36",{"_index":828,"title":{},"body":{"unit-test.html":{}}}],["3",{"_index":186,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"overview.html":{},"additional-documentation/slf4ts-api.html":{}}}],["3/21",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":823,"title":{},"body":{"unit-test.html":{}}}],["3/6",{"_index":827,"title":{},"body":{"unit-test.html":{}}}],["32/36",{"_index":817,"title":{},"body":{"unit-test.html":{}}}],["38",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["39/44",{"_index":810,"title":{},"body":{"unit-test.html":{}}}],["4",{"_index":853,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["4/4",{"_index":655,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["4/8",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["42/42",{"_index":808,"title":{},"body":{"unit-test.html":{}}}],["42/47",{"_index":832,"title":{},"body":{"unit-test.html":{}}}],["43/43",{"_index":804,"title":{},"body":{"unit-test.html":{}}}],["5/13",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["5/9",{"_index":831,"title":{},"body":{"unit-test.html":{}}}],["50",{"_index":668,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["56",{"_index":830,"title":{},"body":{"unit-test.html":{}}}],["6/6",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":836,"title":{},"body":{"unit-test.html":{}}}],["62",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["65",{"_index":818,"title":{},"body":{"unit-test.html":{}}}],["66",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["67",{"_index":835,"title":{},"body":{"unit-test.html":{}}}],["71/89",{"_index":816,"title":{},"body":{"unit-test.html":{}}}],["72",{"_index":833,"title":{},"body":{"unit-test.html":{}}}],["80",{"_index":815,"title":{},"body":{"unit-test.html":{}}}],["81",{"_index":811,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":821,"title":{},"body":{"unit-test.html":{}}}],["83",{"_index":813,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":805,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":809,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":764,"title":{},"body":{"license.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["absolutepath",{"_index":495,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["abstract",{"_index":845,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["abstracting",{"_index":687,"title":{},"body":{"index.html":{}}}],["access",{"_index":906,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["action",{"_index":789,"title":{},"body":{"license.html":{}}}],["actual",{"_index":121,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["adapter",{"_index":690,"title":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}},"body":{"index.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["adapter/lib/slf4ts/cassandralogadapter.ts",{"_index":9,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"coverage.html":{},"unit-test.html":{}}}],["adapter/lib/slf4ts/cassandralogadapter.ts:29",{"_index":38,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["adapter/lib/slf4ts/cassandralogadapter.ts:8",{"_index":26,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["add",{"_index":727,"title":{},"body":{"index.html":{}}}],["added",{"_index":207,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["additional",{"_index":444,"title":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["additionalarguments",{"_index":184,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["additionalarguments.splice(0",{"_index":185,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["additionalarguments.splice(additionalarguments.length",{"_index":393,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["additionaldata",{"_index":880,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["additionally",{"_index":435,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["additionalpaths",{"_index":454,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["additionalpaths.push(mainpath",{"_index":462,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["additionalpaths.push(process.env.logger_binding_additional_path",{"_index":456,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["affect",{"_index":307,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["alias",{"_index":62,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["and/or",{"_index":755,"title":{},"body":{"license.html":{}}}],["andthe",{"_index":864,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["any).paths",{"_index":485,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["any)[logmethodname",{"_index":183,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["api",{"_index":49,"title":{"additional-documentation/slf4ts-api.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["api/lib/slf4ts/loggerbindings.ts",{"_index":414,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"coverage.html":{},"unit-test.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:120",{"_index":507,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:153",{"_index":514,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:173",{"_index":512,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:177",{"_index":511,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:187",{"_index":516,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:203",{"_index":509,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:23",{"_index":597,"title":{},"body":{"interfaces/LoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:33",{"_index":596,"title":{},"body":{"interfaces/LoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:44",{"_index":598,"title":{},"body":{"interfaces/LoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:54",{"_index":599,"title":{},"body":{"interfaces/LoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:64",{"_index":600,"title":{},"body":{"interfaces/LoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:81",{"_index":415,"title":{},"body":{"interfaces/LoggerBinding.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:88",{"_index":416,"title":{},"body":{"interfaces/LoggerBinding.html":{}}}],["api/lib/slf4ts/loggerbindings.ts:95",{"_index":418,"title":{},"body":{"interfaces/LoggerBinding.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts",{"_index":518,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:108",{"_index":532,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:124",{"_index":550,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:137",{"_index":542,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:147",{"_index":551,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:157",{"_index":554,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:172",{"_index":537,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:26",{"_index":529,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:27",{"_index":530,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:28",{"_index":527,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:29",{"_index":528,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:41",{"_index":534,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:57",{"_index":558,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:70",{"_index":559,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerconfiguration.ts:89",{"_index":556,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["api/lib/slf4ts/loggerfactory.ts",{"_index":192,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{},"unit-test.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:115",{"_index":222,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:119",{"_index":229,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:124",{"_index":224,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:128",{"_index":219,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:132",{"_index":220,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:136",{"_index":223,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:146",{"_index":231,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:151",{"_index":239,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:156",{"_index":216,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:161",{"_index":226,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:166",{"_index":241,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:171",{"_index":218,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:176",{"_index":221,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:180",{"_index":228,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:194",{"_index":603,"title":{},"body":{"classes/NullLoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:198",{"_index":602,"title":{},"body":{"classes/NullLoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:20",{"_index":362,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:202",{"_index":604,"title":{},"body":{"classes/NullLoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:206",{"_index":605,"title":{},"body":{"classes/NullLoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:210",{"_index":606,"title":{},"body":{"classes/NullLoggerImplementation.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:231",{"_index":588,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:259",{"_index":594,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:272",{"_index":589,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:28",{"_index":356,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:291",{"_index":595,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:301",{"_index":580,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:302",{"_index":582,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:303",{"_index":584,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:304",{"_index":581,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:305",{"_index":583,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:307",{"_index":590,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:331",{"_index":592,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:343",{"_index":586,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:36",{"_index":360,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:44",{"_index":363,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:52",{"_index":357,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:59",{"_index":359,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:66",{"_index":361,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:72",{"_index":358,"title":{},"body":{"interfaces/ILoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:83",{"_index":213,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:84",{"_index":214,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:85",{"_index":212,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:86",{"_index":211,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["api/lib/slf4ts/loggerfactory.ts:87",{"_index":205,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["app",{"_index":913,"title":{},"body":{"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["appenders",{"_index":922,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["application",{"_index":299,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["application.log",{"_index":925,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["args",{"_index":70,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["args.push(`${classname",{"_index":71,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["args.push(furtherinfo",{"_index":73,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["args.push(message",{"_index":72,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["arguments",{"_index":145,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["arguments[0",{"_index":171,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["arguments[1",{"_index":172,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["arguments[2",{"_index":173,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["arising",{"_index":793,"title":{},"body":{"license.html":{}}}],["array",{"_index":425,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["assigned",{"_index":235,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["associated",{"_index":743,"title":{},"body":{"license.html":{}}}],["async",{"_index":16,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["authors",{"_index":782,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":208,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["b",{"_index":728,"title":{},"body":{"index.html":{}}}],["b.getvendor",{"_index":475,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["b.getversion",{"_index":477,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["before",{"_index":706,"title":{},"body":{"index.html":{}}}],["binding",{"_index":295,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["binding.bindings",{"_index":857,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["binding.getloggerimplementation",{"_index":326,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["binding.getvendor",{"_index":333,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["binding.getversion",{"_index":334,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["bindings",{"_index":319,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["bindings.foreach((binding",{"_index":331,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["bindings.length",{"_index":322,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["bindings.push(path.basename(modulefolder",{"_index":505,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["bindings.registerbinding",{"_index":873,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["bindings[0",{"_index":321,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["boolean",{"_index":316,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["branch",{"_index":720,"title":{},"body":{"index.html":{}}}],["branches",{"_index":800,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":116,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["bridge",{"_index":420,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["build",{"_index":705,"title":{},"body":{"index.html":{}}}],["c",{"_index":132,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"license.html":{}}}],["c=global.console",{"_index":160,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["cache",{"_index":274,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["call",{"_index":424,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["callarguments",{"_index":398,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["callarguments.concat((err",{"_index":639,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["callarguments.concat(...additionalarguments",{"_index":625,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["callarguments.concat(meta",{"_index":637,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["callarguments.concat(metaarg",{"_index":638,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["callarguments.length",{"_index":628,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["callarguments.splice(2",{"_index":627,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["callback",{"_index":545,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["cassandra",{"_index":7,"title":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["cassandralogadapter",{"_index":1,"title":{"classes/CassandraLogAdapter.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"coverage.html":{}}}],["cassandralogadapter(client",{"_index":901,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["catch(console.error",{"_index":336,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["catch(error",{"_index":883,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["categories",{"_index":926,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["causes",{"_index":292,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["certain",{"_index":539,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["change",{"_index":431,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["changes",{"_index":306,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["charge",{"_index":739,"title":{},"body":{"license.html":{}}}],["check",{"_index":716,"title":{},"body":{"index.html":{}}}],["checking",{"_index":707,"title":{},"body":{"index.html":{}}}],["checks",{"_index":538,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["claim",{"_index":785,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"additional-documentation/slf4ts-api.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"overview.html":{}}}],["classname",{"_index":34,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["clears",{"_index":288,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["client",{"_index":21,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"index.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["client.connect",{"_index":905,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["client.keyspace",{"_index":908,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["code",{"_index":911,"title":{},"body":{"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["collection",{"_index":686,"title":{},"body":{"index.html":{}}}],["common_metadata",{"_index":312,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["commonloggerdata",{"_index":391,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["commonloggerdata[0",{"_index":394,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["commonloggerdata[1",{"_index":395,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["commonloggerdata[2",{"_index":396,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["commonmetadata",{"_index":194,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["completed",{"_index":426,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["completing",{"_index":251,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["compose",{"_index":710,"title":{},"body":{"index.html":{}}}],["compoundkey",{"_index":280,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["concat(...additionalarguments",{"_index":400,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["concat(this.bindings",{"_index":482,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["conditionally",{"_index":289,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["conditions",{"_index":763,"title":{},"body":{"license.html":{}}}],["config",{"_index":150,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["configchanged",{"_index":350,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["configchanged(event",{"_index":585,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["configmapping",{"_index":519,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["configuration",{"_index":427,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["configurations",{"_index":555,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["configure",{"_index":405,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["configured",{"_index":437,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["connection",{"_index":795,"title":{},"body":{"license.html":{}}}],["console",{"_index":122,"title":{"additional-documentation/slf4ts-console.html":{}},"body":{"classes/ConsoleLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{}}}],["console.[log",{"_index":146,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console.log",{"_index":147,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console.log('slf4ts",{"_index":324,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["console/lib/slf4ts/consoleloggerbinding.ts",{"_index":85,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"coverage.html":{},"unit-test.html":{}}}],["console/lib/slf4ts/consoleloggerbinding.ts:20",{"_index":97,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{}}}],["console/lib/slf4ts/consoleloggerbinding.ts:35",{"_index":98,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{}}}],["console/lib/slf4ts/consoleloggerbinding.ts:39",{"_index":100,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{}}}],["console/lib/slf4ts/consoleloggerbinding.ts:43",{"_index":101,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts",{"_index":120,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"coverage.html":{},"unit-test.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts:17",{"_index":129,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts:36",{"_index":134,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts:40",{"_index":149,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts:44",{"_index":154,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts:48",{"_index":156,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console/lib/slf4ts/consoleloggerimplementation.ts:61",{"_index":140,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["console/test/slf4ts/consoleloggerimplementationtest.ts:xxx:xxx",{"_index":921,"title":{},"body":{"additional-documentation/slf4ts-console.html":{}}}],["consoleloggerbinding",{"_index":84,"title":{"classes/ConsoleLoggerBinding.html":{}},"body":{"classes/ConsoleLoggerBinding.html":{},"coverage.html":{}}}],["consoleloggerimplementation",{"_index":104,"title":{"classes/ConsoleLoggerImplementation.html":{}},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"coverage.html":{}}}],["consoleloggerimplementationtest.checkargumentpassing",{"_index":920,"title":{},"body":{"additional-documentation/slf4ts-console.html":{}}}],["const",{"_index":63,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{}}}],["constructor(additionalpaths",{"_index":506,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["constructor(c",{"_index":128,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["constructor(emitter",{"_index":20,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["constructor(name",{"_index":204,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["contactpoints",{"_index":897,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["containing",{"_index":442,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["context",{"_index":943,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["contract",{"_index":790,"title":{},"body":{"license.html":{}}}],["copies",{"_index":757,"title":{},"body":{"license.html":{}}}],["copy",{"_index":480,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"license.html":{}}}],["copyright",{"_index":733,"title":{},"body":{"license.html":{}}}],["couple",{"_index":859,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["coverage",{"_index":648,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":896,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["created",{"_index":903,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["creates",{"_index":130,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["creates/uses",{"_index":899,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["current",{"_index":255,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["currentdir",{"_index":107,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["currently",{"_index":945,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["custom",{"_index":947,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["d",{"_index":721,"title":{},"body":{"index.html":{}}}],["daily",{"_index":951,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["damages",{"_index":786,"title":{},"body":{"license.html":{}}}],["datastax",{"_index":893,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["date",{"_index":189,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["date%.log",{"_index":958,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["datepattern",{"_index":959,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["dd",{"_index":962,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["deal",{"_index":744,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":796,"title":{},"body":{"license.html":{}}}],["debug",{"_index":196,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["debug(...args",{"_index":215,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["default",{"_index":375,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["defaultloggerinstance",{"_index":191,"title":{"classes/DefaultLoggerInstance.html":{}},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{}}}],["defaultloglevel",{"_index":520,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["dependencies",{"_index":708,"title":{},"body":{"index.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["dependency",{"_index":697,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":546,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{},"index.html":{}}}],["depsrelease",{"_index":712,"title":{},"body":{"index.html":{}}}],["described",{"_index":142,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["description",{"_index":86,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"index.html":{}}}],["develop",{"_index":847,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["development",{"_index":694,"title":{},"body":{"index.html":{}}}],["disable",{"_index":57,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/LoggerConfigurationImpl.html":{}}}],["discovery",{"_index":869,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["distribute",{"_index":753,"title":{},"body":{"license.html":{}}}],["docker",{"_index":709,"title":{},"body":{"index.html":{}}}],["docs",{"_index":715,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":649,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doesn't",{"_index":855,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["driver",{"_index":45,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"index.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["dummy",{"_index":601,"title":{},"body":{"classes/NullLoggerImplementation.html":{}}}],["during",{"_index":868,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["each",{"_index":423,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["elasticsearch",{"_index":692,"title":{},"body":{"index.html":{}}}],["emitter",{"_index":31,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["emitter.keyspace",{"_index":55,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["emitter.on('log",{"_index":65,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["empty",{"_index":866,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["encapsulates",{"_index":432,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["entire",{"_index":451,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["enum",{"_index":561,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["enumeration",{"_index":560,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":676,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":438,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["err",{"_index":642,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["error",{"_index":79,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["error());example",{"_index":915,"title":{},"body":{"additional-documentation/slf4ts-console.html":{}}}],["error());license",{"_index":944,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["error(...args",{"_index":217,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["errors",{"_index":250,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["eslint",{"_index":56,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/LoggerConfigurationImpl.html":{}}}],["eslint/no",{"_index":61,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["eslint/strict",{"_index":569,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["event",{"_index":340,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"license.html":{}}}],["event.group",{"_index":342,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["event.name",{"_index":344,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["eventemitter",{"_index":23,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/LoggerConfigurationImpl.html":{}}}],["events",{"_index":46,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/LoggerConfigurationImpl.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["example",{"_index":92,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["excluded",{"_index":302,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["exist",{"_index":858,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["existing",{"_index":699,"title":{},"body":{"index.html":{}}}],["exists",{"_index":472,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["export",{"_index":50,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["express",{"_index":773,"title":{},"body":{"license.html":{}}}],["expressions",{"_index":570,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["facade",{"_index":680,"title":{},"body":{"index.html":{},"additional-documentation/slf4ts-api.html":{}}}],["false",{"_index":297,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"unit-test.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["filename",{"_index":924,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["files",{"_index":492,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"license.html":{}}}],["files.foreach((folder",{"_index":494,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["fitness",{"_index":778,"title":{},"body":{"license.html":{}}}],["floating",{"_index":67,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["folder",{"_index":441,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["following",{"_index":762,"title":{},"body":{"license.html":{}}}],["force",{"_index":849,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["foreach((mainpath",{"_index":461,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["foreach((subfolder",{"_index":500,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["formerdata",{"_index":308,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["forwards",{"_index":144,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["found",{"_index":325,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["fr",{"_index":718,"title":{},"body":{"index.html":{}}}],["framework",{"_index":421,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["frameworks",{"_index":860,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["free",{"_index":738,"title":{},"body":{"license.html":{}}}],["fs",{"_index":102,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{}}}],["fs.existssync(packagejsonpath",{"_index":113,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["fs.existssync(path.join(modulefolder",{"_index":504,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["fs.existssync(rootpath",{"_index":491,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["fs.readdirsync(rootpath",{"_index":493,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["function",{"_index":66,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["function(bindings",{"_index":872,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["function.executeuserentrypoint",{"_index":939,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["function.module._load",{"_index":937,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["functionality",{"_index":717,"title":{},"body":{"index.html":{}}}],["functions",{"_index":801,"title":{},"body":{"unit-test.html":{}}}],["furnished",{"_index":760,"title":{},"body":{"license.html":{}}}],["furtherinfo",{"_index":37,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["future",{"_index":236,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["getallloggerbindings",{"_index":502,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["getallloggerbindings(modulefolders",{"_index":508,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["getallmodulefolders",{"_index":483,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["getallmodulefolders(additionalpaths",{"_index":510,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["getbindings",{"_index":481,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["getconfig",{"_index":521,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["getconfig(group",{"_index":531,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["getgroup",{"_index":197,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["getimpl",{"_index":198,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["getimplementation",{"_index":124,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["getimplementation(group",{"_index":133,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["getlogger",{"_index":277,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["getlogger(compoundkey",{"_index":412,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["getlogger(group",{"_index":587,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["getloggerimplementation",{"_index":94,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"additional-documentation/slf4ts-api.html":{}}}],["getloggerinstance",{"_index":374,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["getloggerinstance(group",{"_index":379,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["getloglevel",{"_index":199,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["getloglevel(group",{"_index":533,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["getmetadata",{"_index":200,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["getname",{"_index":201,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["gets",{"_index":136,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["getting",{"_index":678,"title":{"index.html":{},"license.html":{}},"body":{}}],["getvendor",{"_index":95,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"additional-documentation/slf4ts-api.html":{}}}],["getversion",{"_index":96,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"additional-documentation/slf4ts-api.html":{}}}],["gh",{"_index":722,"title":{},"body":{"index.html":{}}}],["git",{"_index":719,"title":{},"body":{"index.html":{}}}],["given",{"_index":247,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["global.console",{"_index":162,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["gonna",{"_index":234,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["granted",{"_index":737,"title":{},"body":{"license.html":{}}}],["group",{"_index":138,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["groupempty",{"_index":341,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["groupmatches",{"_index":345,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["group}.${name",{"_index":174,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["group}:${name",{"_index":281,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["handlelog",{"_index":17,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["handlelog(level",{"_index":32,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["hasconfig",{"_index":522,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["hasconfig(group",{"_index":536,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["hasgroupconfig",{"_index":353,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["hasnameconfig",{"_index":351,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["here",{"_index":167,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["hereby",{"_index":736,"title":{},"body":{"license.html":{}}}],["holders",{"_index":783,"title":{},"body":{"license.html":{}}}],["https://github.com/rstiller/slf4ts",{"_index":143,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["identifier",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["igenerate",{"_index":702,"title":{},"body":{"index.html":{}}}],["ignored",{"_index":547,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["iloggerinstance",{"_index":24,"title":{"interfaces/ILoggerInstance.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["impl",{"_index":195,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["implement",{"_index":863,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["implementation",{"_index":89,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["implementation.it's",{"_index":894,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["implementations",{"_index":854,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["implements",{"_index":91,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["implied",{"_index":774,"title":{},"body":{"license.html":{}}}],["import",{"_index":42,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["included",{"_index":767,"title":{},"body":{"license.html":{}}}],["including",{"_index":747,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["index.ts",{"_index":871,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["info(...args",{"_index":225,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["informs",{"_index":430,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["init",{"_index":695,"title":{},"body":{"index.html":{}}}],["initial",{"_index":206,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["initialconfig",{"_index":261,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["initialize",{"_index":318,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["initialized",{"_index":315,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["inspired",{"_index":841,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["instance",{"_index":131,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["instance.addcontext(key",{"_index":410,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["instance.clearcontext",{"_index":408,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["instance.configure(config",{"_index":646,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["instance.level",{"_index":406,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["instance.log(...callarguments",{"_index":403,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["instance.log.apply(instance",{"_index":644,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["instanceof",{"_index":52,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["instances",{"_index":275,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["instantiate",{"_index":294,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["interface",{"_index":244,"title":{"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"interfaces/LoggerImplementation.html":{}},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{}}}],["interfaces",{"_index":355,"title":{},"body":{"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"interfaces/LoggerImplementation.html":{},"overview.html":{},"additional-documentation/slf4ts-api.html":{}}}],["internal/main/run_main_module.js:17:47",{"_index":942,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["internal/modules/cjs/loader.js:1000:32",{"_index":936,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["internal/modules/cjs/loader.js:1151:30",{"_index":932,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["internal/modules/cjs/loader.js:1171:10",{"_index":934,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["internal/modules/cjs/loader.js:899:14",{"_index":938,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["internal/modules/run_main.js:71:12",{"_index":941,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["introduced",{"_index":698,"title":{},"body":{"index.html":{}}}],["invocation",{"_index":237,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["invoked",{"_index":422,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["invokes",{"_index":450,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["it's",{"_index":301,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["java",{"_index":843,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["keyspace",{"_index":900,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["kind",{"_index":772,"title":{},"body":{"license.html":{}}}],["latest",{"_index":910,"title":{},"body":{"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["length",{"_index":478,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["level",{"_index":39,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["levels",{"_index":948,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["liability",{"_index":787,"title":{},"body":{"license.html":{}}}],["liable",{"_index":784,"title":{},"body":{"license.html":{}}}],["lib",{"_index":691,"title":{},"body":{"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["libraries",{"_index":688,"title":{},"body":{"index.html":{},"additional-documentation/slf4ts-api.html":{}}}],["license",{"_index":732,"title":{"license.html":{}},"body":{"license.html":{},"additional-documentation/slf4ts-console.html":{}}}],["limitation",{"_index":748,"title":{},"body":{"license.html":{}}}],["limited",{"_index":775,"title":{},"body":{"license.html":{}}}],["line",{"_index":59,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["lines",{"_index":802,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":168,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"index.html":{}}}],["list",{"_index":726,"title":{},"body":{"index.html":{}}}],["listener",{"_index":544,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["listeners",{"_index":553,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["loaded",{"_index":453,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["loading",{"_index":433,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["loads",{"_index":447,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["location",{"_index":436,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["log",{"_index":8,"title":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["log(...args",{"_index":139,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["log(loglevel",{"_index":227,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["log4js",{"_index":366,"title":{"additional-documentation/slf4ts-log4js.html":{}},"body":{"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["log4js/lib/slf4ts/log4jsloggerbinding.ts",{"_index":365,"title":{},"body":{"classes/Log4JSLoggerBinding.html":{},"coverage.html":{},"unit-test.html":{}}}],["log4js/lib/slf4ts/log4jsloggerbinding.ts:20",{"_index":367,"title":{},"body":{"classes/Log4JSLoggerBinding.html":{}}}],["log4js/lib/slf4ts/log4jsloggerbinding.ts:35",{"_index":368,"title":{},"body":{"classes/Log4JSLoggerBinding.html":{}}}],["log4js/lib/slf4ts/log4jsloggerbinding.ts:39",{"_index":369,"title":{},"body":{"classes/Log4JSLoggerBinding.html":{}}}],["log4js/lib/slf4ts/log4jsloggerbinding.ts:43",{"_index":370,"title":{},"body":{"classes/Log4JSLoggerBinding.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts",{"_index":372,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:22",{"_index":377,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:24",{"_index":381,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:42",{"_index":378,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:46",{"_index":382,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:50",{"_index":383,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:55",{"_index":384,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4js/lib/slf4ts/log4jsloggerimplementation.ts:65",{"_index":380,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["log4jsloggerbinding",{"_index":364,"title":{"classes/Log4JSLoggerBinding.html":{}},"body":{"classes/Log4JSLoggerBinding.html":{},"coverage.html":{}}}],["log4jsloggerimplementation",{"_index":371,"title":{"classes/Log4JSLoggerImplementation.html":{}},"body":{"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"coverage.html":{}}}],["logfilename",{"_index":957,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["logger",{"_index":123,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["logger.getgroup",{"_index":346,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["logger.getimpl().setconfig(event.config",{"_index":354,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["logger.getmetadata",{"_index":310,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["logger.getname",{"_index":348,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["logger.setloglevel(...);license",{"_index":909,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["logger.setloglevel(event.loglevel",{"_index":349,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["logger.setmetadata(loggerfactory.common_metadata",{"_index":311,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["logger_binding_additional_path",{"_index":440,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["logger_instance_cache",{"_index":317,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerbinding",{"_index":88,"title":{"interfaces/LoggerBinding.html":{}},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"coverage.html":{},"additional-documentation/slf4ts-api.html":{}}}],["loggerbindings",{"_index":242,"title":{"classes/LoggerBindings.html":{}},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{},"additional-documentation/slf4ts-api.html":{}}}],["loggerbindings().getbindings",{"_index":320,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerbindings.foreach((binding",{"_index":466,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["loggerconfiguration",{"_index":243,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["loggerconfiguration.getconfig(group",{"_index":262,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerconfiguration.getloglevel(group",{"_index":284,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerconfiguration.hasconfig(logger.getgroup",{"_index":352,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerconfiguration.onconfigchanged(loggerfactory.configchanged",{"_index":338,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerconfiguration.onloglevelchanged(loggerfactory.loglevelchanged",{"_index":337,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerconfiguration.setconfig(config",{"_index":891,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["loggerconfiguration.setloglevel(loglevel.error",{"_index":888,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["loggerconfiguration.setloglevel(loglevel.info",{"_index":885,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["loggerconfiguration.setloglevel(loglevel.warn",{"_index":887,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["loggerconfigurationimpl",{"_index":517,"title":{"classes/LoggerConfigurationImpl.html":{}},"body":{"classes/LoggerConfigurationImpl.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loggerfactory",{"_index":47,"title":{"classes/LoggerFactory.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["loggerfactory.common_metadata",{"_index":285,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.getlogger",{"_index":328,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["loggerfactory.getlogger(\"cassandra",{"_index":907,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["loggerfactory.getlogger(\"my",{"_index":877,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["loggerfactory.getlogger('cassandra",{"_index":54,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["loggerfactory.initialize",{"_index":279,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.initialized",{"_index":278,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.logger",{"_index":286,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.logger_instance_cache.clear",{"_index":298,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.logger_instance_cache.foreach((logger",{"_index":309,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.logger_instance_cache.get(compoundkey",{"_index":283,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.logger_instance_cache.has(compoundkey",{"_index":282,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.logger_instance_cache.set(compoundkey",{"_index":287,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.root_logger",{"_index":327,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerfactory.root_logger.info(message",{"_index":335,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loggerimplementation",{"_index":99,"title":{"interfaces/LoggerImplementation.html":{}},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"additional-documentation/slf4ts-api.html":{}}}],["loggername",{"_index":169,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["loggers",{"_index":373,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["logging",{"_index":252,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["loggingto",{"_index":846,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["loglevel",{"_index":153,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{}}}],["loglevel.debug",{"_index":182,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loglevel.error",{"_index":271,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loglevel.info",{"_index":269,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loglevel.trace",{"_index":266,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loglevel.warn",{"_index":270,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loglevel[level",{"_index":177,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["loglevelchanged",{"_index":339,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["loglevelchanged(event",{"_index":591,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["loglevelmapping",{"_index":385,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loglevelmapping[level",{"_index":399,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["loglevelmapping[loglevel",{"_index":407,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["loglevelmapping[loglevel.debug",{"_index":387,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["loglevelmapping[loglevel.error",{"_index":390,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["loglevelmapping[loglevel.info",{"_index":388,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["loglevelmapping[loglevel.trace",{"_index":386,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["loglevelmapping[loglevel.warn",{"_index":389,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["loglevelname",{"_index":176,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["loglevelname.tolowercase",{"_index":179,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["loglevelname].concat(additionalarguments",{"_index":190,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["logmethod",{"_index":180,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["logmethod.apply(this.console",{"_index":187,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["logmethodname",{"_index":178,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["logs",{"_index":246,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["logstash",{"_index":963,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["lvl",{"_index":640,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["mainmodule",{"_index":457,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["map",{"_index":43,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["matching",{"_index":82,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["meant",{"_index":851,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["memberof",{"_index":161,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["merchantability",{"_index":777,"title":{},"body":{"license.html":{}}}],["merge",{"_index":752,"title":{},"body":{"license.html":{}}}],["message",{"_index":36,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["messages",{"_index":249,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["meta",{"_index":633,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["metaarg",{"_index":630,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["metaargs",{"_index":626,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["metaargs.foreach((meta",{"_index":632,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["metaargs.length",{"_index":631,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["metadata",{"_index":157,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["method",{"_index":141,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["methods",{"_index":14,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["miscellaneous",{"_index":675,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":731,"title":{},"body":{"index.html":{},"license.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["mm",{"_index":961,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["modify",{"_index":751,"title":{},"body":{"license.html":{}}}],["module",{"_index":449,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"index.html":{}}}],["module._compile",{"_index":931,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["module.load",{"_index":935,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["modulefolders",{"_index":463,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["modulefolders.foreach((modulefolder",{"_index":503,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["modulefolders.push(absolutepath",{"_index":497,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["modulefolders.push(folder",{"_index":488,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["modulefolders.push(subfolder",{"_index":501,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["modulepath",{"_index":105,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["modules",{"_index":685,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{},"additional-documentation/slf4ts-api.html":{}}}],["modules.slf4ts",{"_index":684,"title":{},"body":{"index.html":{}}}],["mono",{"_index":682,"title":{},"body":{"index.html":{}}}],["msg",{"_index":641,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["multiple",{"_index":330,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["n",{"_index":332,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["named",{"_index":443,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["nameempty",{"_index":343,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["namematches",{"_index":347,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["needs",{"_index":862,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["new",{"_index":118,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["next",{"_index":58,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["node",{"_index":448,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["node.console",{"_index":90,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{}}}],["node_modules",{"_index":499,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["node_path",{"_index":434,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["nodejs",{"_index":681,"title":{},"body":{"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["noninfringement",{"_index":781,"title":{},"body":{"license.html":{}}}],["note",{"_index":304,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["nothing",{"_index":165,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["notice",{"_index":765,"title":{},"body":{"license.html":{}}}],["null",{"_index":51,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["nullloggerimplementation",{"_index":313,"title":{"classes/NullLoggerImplementation.html":{}},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"coverage.html":{}}}],["number",{"_index":170,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["numeric",{"_index":852,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["object",{"_index":233,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["object.entries(metadata).foreach(([key",{"_index":409,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["object.module._extensions..js",{"_index":933,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["obtaining",{"_index":741,"title":{},"body":{"license.html":{}}}],["onconfigchanged",{"_index":523,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["onconfigchanged(callback",{"_index":541,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["onloglevelchanged",{"_index":524,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["onloglevelchanged(callback",{"_index":549,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["operation",{"_index":209,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["opt/slf4ts/packages/slf4ts",{"_index":803,"title":{},"body":{"unit-test.html":{}}}],["optional",{"_index":30,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["origin/gh",{"_index":729,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":792,"title":{},"body":{"license.html":{}}}],["out",{"_index":794,"title":{},"body":{"license.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["output",{"_index":916,"title":{},"body":{"additional-documentation/slf4ts-console.html":{}}}],["overview",{"_index":797,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":865,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["package.json",{"_index":112,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["packagejson",{"_index":93,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["packagejsonpath",{"_index":111,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["packages",{"_index":713,"title":{},"body":{"index.html":{}}}],["packages/.../log4jsloggerimplementation.ts",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/.../loggerconfiguration.ts",{"_index":677,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["packages/.../winstonloggerimplementation.ts",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["packages/slf4ts",{"_index":6,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["page",{"_index":840,"title":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}},"body":{}}],["pages",{"_index":723,"title":{},"body":{"index.html":{}}}],["param",{"_index":159,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["particular",{"_index":779,"title":{},"body":{"license.html":{}}}],["party",{"_index":950,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["passed",{"_index":137,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["path",{"_index":103,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{}}}],["path.join(rootpath",{"_index":496,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["path.parse(module.filename",{"_index":106,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["path.resolve(modulepath.dir",{"_index":108,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["path.resolve(path.join(currentdir",{"_index":110,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["paths",{"_index":446,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["permission",{"_index":735,"title":{},"body":{"license.html":{}}}],["permit",{"_index":758,"title":{},"body":{"license.html":{}}}],["person",{"_index":740,"title":{},"body":{"license.html":{}}}],["persons",{"_index":759,"title":{},"body":{"license.html":{}}}],["pnpm",{"_index":701,"title":{},"body":{"index.html":{}}}],["popular",{"_index":842,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["portions",{"_index":769,"title":{},"body":{"license.html":{}}}],["postprocessor",{"_index":890,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["pre",{"_index":902,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["present",{"_index":540,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["prints",{"_index":927,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["process",{"_index":458,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["process.env",{"_index":455,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["process.mainmodule",{"_index":459,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["process.mainmodule.paths",{"_index":460,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["processed",{"_index":253,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["project",{"_index":693,"title":{},"body":{"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["promise",{"_index":41,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["promise((resolve",{"_index":401,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["promises",{"_index":68,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["protected",{"_index":15,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["provided",{"_index":770,"title":{},"body":{"license.html":{}}}],["prune",{"_index":725,"title":{},"body":{"index.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["publish",{"_index":714,"title":{},"body":{"index.html":{},"license.html":{}}}],["publishdocslicense",{"_index":730,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":780,"title":{},"body":{"license.html":{}}}],["re",{"_index":293,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["readonly",{"_index":13,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["register",{"_index":470,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["registerbinding",{"_index":471,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["registerbinding(binding",{"_index":513,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["registerfunc",{"_index":467,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["registerfunc(this",{"_index":469,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["registers",{"_index":543,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["registration",{"_index":452,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["reinit",{"_index":291,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["reject",{"_index":402,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["reject(err",{"_index":643,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["remove",{"_index":392,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{}}}],["removealllisteners",{"_index":525,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["removed",{"_index":548,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["removes",{"_index":552,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["report",{"_index":703,"title":{},"body":{"index.html":{}}}],["repository",{"_index":683,"title":{},"body":{"index.html":{}}}],["representing",{"_index":245,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["require(packagejsonpath",{"_index":115,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["require.main.require(binding",{"_index":468,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["reset",{"_index":296,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["reset(reinit",{"_index":593,"title":{},"body":{"classes/LoggerFactory.html":{}}}],["resets",{"_index":290,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["resolve",{"_index":404,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["restriction",{"_index":746,"title":{},"body":{"license.html":{}}}],["result",{"_index":81,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["results",{"_index":83,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["return",{"_index":117,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["returned",{"_index":535,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["returns",{"_index":40,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["reusable",{"_index":848,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["rights",{"_index":749,"title":{},"body":{"license.html":{}}}],["rm",{"_index":711,"title":{},"body":{"index.html":{}}}],["root",{"_index":175,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["root_logger",{"_index":314,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["root_logger.info(\"test",{"_index":914,"title":{},"body":{"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["root_logger.setmetadata",{"_index":912,"title":{},"body":{"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["rootpath",{"_index":490,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["rootpaths",{"_index":484,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["rootpaths.concat(additionalpaths).foreach((rootpath",{"_index":486,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["rotate",{"_index":952,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["run",{"_index":704,"title":{},"body":{"index.html":{}}}],["runmain",{"_index":940,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["s",{"_index":895,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["sample",{"_index":870,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["search",{"_index":445,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["sell",{"_index":756,"title":{},"body":{"license.html":{}}}],["set",{"_index":166,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["setconfig",{"_index":125,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["setconfig(config",{"_index":148,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["setdefaultloglevel",{"_index":526,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["setdefaultloglevel(defaultloglevel",{"_index":557,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["setloglevel",{"_index":126,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["setloglevel(loglevel",{"_index":152,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["setmetadata",{"_index":127,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["setmetadata(commonmetadata",{"_index":230,"title":{},"body":{"classes/DefaultLoggerInstance.html":{}}}],["setmetadata(metadata",{"_index":155,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["sets",{"_index":232,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["shall",{"_index":766,"title":{},"body":{"license.html":{}}}],["shared",{"_index":305,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["silly",{"_index":624,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["simple",{"_index":87,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{}}}],["single",{"_index":867,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["slf",{"_index":64,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["slf.handlelog(level",{"_index":69,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["slf4j",{"_index":844,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["slf4ts",{"_index":48,"title":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["software",{"_index":742,"title":{},"body":{"license.html":{}}}],["somefile.log",{"_index":955,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["something",{"_index":928,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["something(value",{"_index":878,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["specific",{"_index":429,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{}}}],["specified",{"_index":428,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{}}}],["stack",{"_index":634,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["standard",{"_index":193,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["started",{"_index":679,"title":{"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":254,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{}}}],["statements",{"_index":651,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":276,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["status",{"_index":689,"title":{},"body":{"index.html":{}}}],["stdout",{"_index":923,"title":{},"body":{"additional-documentation/slf4ts-log4js.html":{}}}],["string",{"_index":33,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["subject",{"_index":761,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":754,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":768,"title":{},"body":{"license.html":{}}}],["support/register",{"_index":44,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["supported",{"_index":946,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["t",{"_index":135,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["table",{"_index":674,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":673,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["template",{"_index":164,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"interfaces/LoggerImplementation.html":{}}}],["test",{"_index":799,"title":{"unit-test.html":{}},"body":{"unit-test.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["testvalue",{"_index":881,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["third",{"_index":949,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["this.bindings.filter((b",{"_index":473,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["this.bindings.push(binding",{"_index":479,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["this.commonmetadata",{"_index":260,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.configmapping.clear",{"_index":578,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.configmapping.get",{"_index":573,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.configmapping.get(`${group",{"_index":572,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.configmapping.get(`${group}:${name",{"_index":571,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.configmapping.has(compoundkey",{"_index":579,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.configmapping.set(compoundkey",{"_index":567,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.console",{"_index":163,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["this.console.log",{"_index":181,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["this.defaultloglevel",{"_index":564,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.events.emit('changed:config",{"_index":568,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.events.emit('changed:log",{"_index":566,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.events.on('changed:config",{"_index":575,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.events.on('changed:log",{"_index":574,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.events.removealllisteners",{"_index":576,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.getallloggerbindings(modulefolders",{"_index":465,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["this.getallmodulefolders(additionalpaths",{"_index":464,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["this.getloggerinstance(group",{"_index":397,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["this.group",{"_index":258,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.impl",{"_index":256,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.impl.getimplementation(this.group",{"_index":272,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.impl.setconfig(initialconfig",{"_index":263,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.impl.setloglevel(loglevel",{"_index":264,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.impl.setmetadata(commonmetadata",{"_index":265,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.log",{"_index":53,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["this.log.apply(this",{"_index":268,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.log.debug(...args",{"_index":75,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["this.log.error(...args",{"_index":80,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["this.log.info(...args",{"_index":76,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["this.log.warn(...args",{"_index":78,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["this.loggers.get(compoundkey",{"_index":411,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["this.loggers.set(compoundkey",{"_index":413,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["this.loglevel",{"_index":259,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.loglevelmapping.clear",{"_index":577,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.loglevelmapping.get(compoundkey",{"_index":563,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.loglevelmapping.has(compoundkey",{"_index":562,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.loglevelmapping.set(compoundkey",{"_index":565,"title":{},"body":{"classes/LoggerConfigurationImpl.html":{}}}],["this.name",{"_index":257,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.name].concat(...arguments).concat(this.commonmetadata",{"_index":267,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["this.packagejson",{"_index":114,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["this.packagejson.version",{"_index":119,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/WinstonLoggerBinding.html":{}}}],["this.visitnodemodules(path.join(absolutepath",{"_index":498,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["this.visitnodemodules(rootpath).foreach((folder",{"_index":487,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["tort",{"_index":791,"title":{},"body":{"license.html":{}}}],["trace",{"_index":202,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{}}}],["trace(...args",{"_index":238,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["transports",{"_index":889,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["true",{"_index":109,"title":{},"body":{"classes/ConsoleLoggerBinding.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["try",{"_index":882,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/ConsoleLoggerBinding.html":{},"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerBinding.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["typeof",{"_index":636,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["typescript",{"_index":60,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/LoggerConfigurationImpl.html":{},"additional-documentation/slf4ts-api.html":{}}}],["undefined",{"_index":35,"title":{},"body":{"classes/CassandraLogAdapter.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["underlying",{"_index":210,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["unit",{"_index":798,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["update",{"_index":696,"title":{},"body":{"index.html":{}}}],["updated",{"_index":700,"title":{},"body":{"index.html":{}}}],["updates",{"_index":303,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["usage",{"_index":875,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["usageof",{"_index":850,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["use",{"_index":750,"title":{},"body":{"license.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{}}}],["used",{"_index":273,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["using",{"_index":248,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["usual",{"_index":904,"title":{},"body":{"additional-documentation/slf4ts-cassandra-log-adapter.html":{},"additional-documentation/slf4ts-log4js.html":{}}}],["util",{"_index":158,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{}}}],["util.inspect(meta",{"_index":635,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["util.inspect(new",{"_index":188,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{}}}],["value",{"_index":376,"title":{},"body":{"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{},"additional-documentation/slf4ts-api.html":{}}}],["variable",{"_index":439,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"coverage.html":{}}}],["variables",{"_index":837,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vendor",{"_index":417,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["vendorequals",{"_index":474,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["verbose",{"_index":74,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["version",{"_index":419,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{},"additional-documentation/slf4ts-console.html":{},"additional-documentation/slf4ts-log4js.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["versionequals",{"_index":476,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["visitnodemodules",{"_index":489,"title":{},"body":{"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"interfaces/LoggerImplementation.html":{}}}],["visitnodemodules(rootpath",{"_index":515,"title":{},"body":{"classes/LoggerBindings.html":{}}}],["void",{"_index":151,"title":{},"body":{"classes/ConsoleLoggerImplementation.html":{},"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"interfaces/LoggerBinding.html":{},"classes/LoggerBindings.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"interfaces/LoggerImplementation.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"additional-documentation/slf4ts-api.html":{}}}],["warn",{"_index":203,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/Log4JSLoggerImplementation.html":{},"classes/LoggerConfigurationImpl.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{},"classes/WinstonLoggerImplementation.html":{},"miscellaneous/enumerations.html":{},"additional-documentation/slf4ts-api.html":{}}}],["warn(...args",{"_index":240,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["warning",{"_index":77,"title":{},"body":{"classes/CassandraLogAdapter.html":{}}}],["warranties",{"_index":776,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":771,"title":{},"body":{"license.html":{}}}],["whether",{"_index":788,"title":{},"body":{"license.html":{}}}],["wide",{"_index":300,"title":{},"body":{"classes/DefaultLoggerInstance.html":{},"interfaces/ILoggerInstance.html":{},"classes/LoggerFactory.html":{},"classes/NullLoggerImplementation.html":{}}}],["winston",{"_index":609,"title":{"additional-documentation/slf4ts-winston.html":{}},"body":{"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"index.html":{},"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["winston.createlogger",{"_index":647,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston.log.apply(winston",{"_index":645,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston.logger",{"_index":619,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston.transports.console",{"_index":953,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["winston.transports.dailyrotatefile",{"_index":956,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["winston.transports.file",{"_index":954,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}],["winston/lib/slf4ts/winstonloggerbinding.ts",{"_index":608,"title":{},"body":{"classes/WinstonLoggerBinding.html":{},"coverage.html":{},"unit-test.html":{}}}],["winston/lib/slf4ts/winstonloggerbinding.ts:20",{"_index":610,"title":{},"body":{"classes/WinstonLoggerBinding.html":{}}}],["winston/lib/slf4ts/winstonloggerbinding.ts:35",{"_index":611,"title":{},"body":{"classes/WinstonLoggerBinding.html":{}}}],["winston/lib/slf4ts/winstonloggerbinding.ts:39",{"_index":612,"title":{},"body":{"classes/WinstonLoggerBinding.html":{}}}],["winston/lib/slf4ts/winstonloggerbinding.ts:43",{"_index":613,"title":{},"body":{"classes/WinstonLoggerBinding.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts",{"_index":615,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:23",{"_index":616,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:25",{"_index":620,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:74",{"_index":617,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:78",{"_index":621,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:86",{"_index":622,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:90",{"_index":623,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winston/lib/slf4ts/winstonloggerimplementation.ts:94",{"_index":618,"title":{},"body":{"classes/WinstonLoggerImplementation.html":{}}}],["winstonloggerbinding",{"_index":607,"title":{"classes/WinstonLoggerBinding.html":{}},"body":{"classes/WinstonLoggerBinding.html":{},"coverage.html":{}}}],["winstonloggerimplementation",{"_index":614,"title":{"classes/WinstonLoggerImplementation.html":{}},"body":{"classes/WinstonLoggerBinding.html":{},"classes/WinstonLoggerImplementation.html":{},"coverage.html":{}}}],["within",{"_index":886,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["without",{"_index":745,"title":{},"body":{"license.html":{},"additional-documentation/slf4ts-api.html":{}}}],["work",{"_index":856,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["worktree",{"_index":724,"title":{},"body":{"index.html":{}}}],["write",{"_index":861,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["x",{"_index":876,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["x\");license",{"_index":892,"title":{},"body":{"additional-documentation/slf4ts-api.html":{},"additional-documentation/slf4ts-winston.html":{}}}],["x.log.debug(`a",{"_index":879,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["x.log.error('error",{"_index":884,"title":{},"body":{"additional-documentation/slf4ts-api.html":{}}}],["yyyy",{"_index":960,"title":{},"body":{"additional-documentation/slf4ts-winston.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CassandraLogAdapter.html":{"url":"classes/CassandraLogAdapter.html","title":"class - CassandraLogAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CassandraLogAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-cassandra-log-adapter/lib/slf4ts/CassandraLogAdapter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                handleLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(emitter: Client | EventEmitter, log: ILoggerInstance)\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-cassandra-log-adapter/lib/slf4ts/CassandraLogAdapter.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emitter\n                                                  \n                                                        \n                                                                    Client | EventEmitter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        log\n                                                  \n                                                        \n                                                                        ILoggerInstance\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            log\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILoggerInstance\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-cassandra-log-adapter/lib/slf4ts/CassandraLogAdapter.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            handleLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleLog(level: string, className: string | undefined, message: string, furtherInfo: any | undefined)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-cassandra-log-adapter/lib/slf4ts/CassandraLogAdapter.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    className\n                                    \n                                            string | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    furtherInfo\n                                    \n                                            any | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { Client } from 'cassandra-driver'\nimport { EventEmitter } from 'events'\nimport { ILoggerInstance, LoggerFactory } from 'slf4ts-api'\n\nexport class CassandraLogAdapter {\n  private readonly log: ILoggerInstance;\n\n  public constructor (emitter: Client | EventEmitter, log: ILoggerInstance = null) {\n    if (log === null) {\n      if (emitter instanceof Client) {\n        this.log = LoggerFactory.getLogger('cassandra', emitter.keyspace)\n      } else {\n        this.log = LoggerFactory.getLogger('cassandra')\n      }\n    } else {\n      this.log = log\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const slf = this\n    emitter.on('log', function (level: any, className: any, message: any, furtherInfo: any) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      slf.handleLog(level, className, message, furtherInfo)\n    })\n  }\n\n  protected async handleLog (\n    level: string,\n    className: string | undefined,\n    message: string,\n    furtherInfo: any | undefined): Promise {\n    const args: any[] = []\n    if (className) {\n      args.push(`${className} - ${message}`)\n    } else {\n      args.push(message)\n    }\n    if (furtherInfo) {\n      args.push(furtherInfo)\n    }\n\n    /* eslint-disable @typescript-eslint/no-floating-promises */\n    if (level === 'verbose') {\n      this.log.debug(...args)\n    } else if (level === 'info') {\n      this.log.info(...args)\n    } else if (level === 'warning') {\n      this.log.warn(...args)\n    } else if (level === 'error') {\n      this.log.error(...args)\n    } else {\n      this.log.info(...args)\n    }\n    /* eslint-disable @typescript-eslint/no-floating-promises */\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConsoleLoggerBinding.html":{"url":"classes/ConsoleLoggerBinding.html","title":"class - ConsoleLoggerBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConsoleLoggerBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts\n        \n\n            \n                Description\n            \n            \n                A simple LoggerBinding implementation for Node.Console.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerBinding\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                packageJson\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getLoggerImplementation\n                            \n                            \n                                    Public\n                                getVendor\n                            \n                            \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            packageJson\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLoggerImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLoggerImplementation()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         LoggerImplementation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVendor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVendor()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVersion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport {\n  LoggerBinding,\n  LoggerImplementation\n} from 'slf4ts-api'\n\nimport { ConsoleLoggerImplementation } from './ConsoleLoggerImplementation'\n\n/**\n * A simple LoggerBinding implementation for Node.Console.\n *\n * @export\n * @class ConsoleLoggerBinding\n * @implements {LoggerBinding}\n */\nexport class ConsoleLoggerBinding implements LoggerBinding {\n  private readonly packageJson: any;\n\n  public constructor () {\n    const modulePath = path.parse(module.filename)\n    let currentDir = path.resolve(modulePath.dir)\n    while (true) {\n      currentDir = path.resolve(path.join(currentDir, '..'))\n      const packageJsonPath = path.resolve(path.join(currentDir, 'package.json'))\n      if (fs.existsSync(packageJsonPath)) {\n        this.packageJson = require(packageJsonPath)\n        break\n      }\n    }\n  }\n\n  public getLoggerImplementation (): LoggerImplementation {\n    return new ConsoleLoggerImplementation()\n  }\n\n  public getVendor (): string {\n    return 'Node.Console'\n  }\n\n  public getVersion (): string {\n    return this.packageJson.version\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConsoleLoggerImplementation.html":{"url":"classes/ConsoleLoggerImplementation.html","title":"class - ConsoleLoggerImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConsoleLoggerImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts\n        \n\n            \n                Description\n            \n            \n                The actual console logger implementation.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerImplementation\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                console\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getImplementation\n                            \n                            \n                                    Public\n                                    Async\n                                log\n                            \n                            \n                                    Public\n                                setConfig\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(c: Console)\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of ConsoleLoggerImplementation.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        c\n                                                  \n                                                        \n                                                                    Console\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Node.Console implementation.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            console\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Console\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImplementation(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Gets the console instance passed to the constructor.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        the console implementation passed to the constructor.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:61\n                \n            \n\n\n            \n                \n                    Log method as described in https://github.com/rstiller/slf4ts.\nThis method forwards the arguments to 'console.[log-level]' or 'console.log' method.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setConfig(config: T, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:40\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(logLevel: LogLevel, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(metadata: any, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport {\n  LoggerImplementation,\n  LogLevel\n} from 'slf4ts-api'\nimport * as util from 'util'\n\n/**\n * The actual console logger implementation.\n *\n * @export\n * @class ConsoleLoggerImplementation\n * @implements {LoggerImplementation}\n */\nexport class ConsoleLoggerImplementation implements LoggerImplementation {\n  private readonly console: Console;\n\n  /**\n     * Creates an instance of ConsoleLoggerImplementation.\n     *\n     * @param {Console} [c=global.console] The Node.Console implementation.\n     * @memberof ConsoleLoggerImplementation\n     */\n  public constructor (c: Console = global.console) {\n    this.console = c\n  }\n\n  /**\n     * Gets the console instance passed to the constructor.\n     *\n     * @template T\n     * @returns {T} the console implementation passed to the constructor.\n     * @memberof ConsoleLoggerImplementation\n     */\n  public getImplementation(group: string, name: string): T {\n    return this.console as any\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    // no config for console ...\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    // nothing to set here ...\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    // nothing to set here ...\n  }\n\n  /**\n     * Log method as described in {@link https://github.com/rstiller/slf4ts}.\n     *\n     * This method forwards the arguments to 'console.[log-level]' or 'console.log' method.\n     *\n     * @param {...any[]} args\n     * @returns {Promise}\n     * @memberof ConsoleLoggerImplementation\n     */\n  public async log (...args: any[]): Promise {\n    let loggerName = ''\n    const level: number = arguments[0]\n    const group: string = arguments[1]\n    const name: string = arguments[2]\n\n    if (group && name) {\n      loggerName = `${group}.${name}`\n    } else if (group) {\n      loggerName = group\n    } else if (name) {\n      loggerName = name\n    } else {\n      loggerName = 'ROOT'\n    }\n\n    const logLevelName = LogLevel[level] ? LogLevel[level] : ''\n    const logMethodName = logLevelName.toLowerCase()\n\n    let logMethod: (...args: any[]) => void = this.console.log\n    if (level !== LogLevel.DEBUG &&\n            logMethodName in this.console &&\n            (this.console as any)[logMethodName] instanceof Function) {\n      logMethod = (this.console as any)[logMethodName]\n    }\n\n    const additionalArguments: any[] = [...arguments]\n    additionalArguments.splice(0, 3)\n    logMethod.apply(this.console, [util.inspect(new Date()), loggerName, logLevelName].concat(additionalArguments))\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultLoggerInstance.html":{"url":"classes/DefaultLoggerInstance.html","title":"class - DefaultLoggerInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultLoggerInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n        \n\n            \n                Description\n            \n            \n                The standard logger instance implementation.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ILoggerInstance\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                commonMetadata\n                            \n                            \n                                    Private\n                                    Readonly\n                                group\n                            \n                            \n                                    Private\n                                    Readonly\n                                impl\n                            \n                            \n                                    Private\n                                logLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                debug\n                            \n                            \n                                    Public\n                                    Async\n                                error\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getImpl\n                            \n                            \n                                    Public\n                                getImplementation\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                    Async\n                                info\n                            \n                            \n                                    Private\n                                    Async\n                                log\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                    Async\n                                trace\n                            \n                            \n                                    Public\n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, group: string, logLevel: LogLevel, commonMetadata: any, impl: LoggerImplementation)\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:87\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultLoggerInstance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The name of the logger instance.\n\n                                                        \n                                                \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The group of the logger instance.\n\n                                                        \n                                                \n                                                \n                                                        logLevel\n                                                  \n                                                        \n                                                                        LogLevel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The initial log-level of the logger instance.\n\n                                                        \n                                                \n                                                \n                                                        commonMetadata\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The metadata added automatically to every log operation.\n\n                                                        \n                                                \n                                                \n                                                        impl\n                                                  \n                                                        \n                                                                        LoggerImplementation\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The underlying logger implementation.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            commonMetadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            impl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoggerImplementation\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LogLevel\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:84\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            error\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    error(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGroup()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getImpl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImpl()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         LoggerImplementation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImplementation()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:176\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            info\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    info(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(logLevel: LogLevel, ...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(logLevel: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(commonMetadata: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:146\n                \n            \n\n\n            \n                \n                    Sets the metadata object that is gonna be assigned to every future invocation of any log method.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    commonMetadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a metadata object - can be undefined or null.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { LoggerBindings, LoggerImplementation } from './LoggerBindings'\nimport { LoggerConfiguration, LogLevel } from './LoggerConfiguration'\n\n/**\n * Interface representing a logger instance.\n *\n * @export\n * @interface ILoggerInstance\n */\nexport interface ILoggerInstance {\n  /**\n     * Logs the given message using TRACE log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  trace(...args: any[]): Promise\n  /**\n     * Logs the given message using DEBUG log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  debug(...args: any[]): Promise\n  /**\n     * Logs the given message using INFO log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  info(...args: any[]): Promise\n  /**\n     * Logs the given message using WARN log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  warn(...args: any[]): Promise\n  /**\n     * Logs the given message using ERROR log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  error(...args: any[]): Promise\n  /**\n     * Gets the current log-level.\n     *\n     * @returns {LogLevel} The log-level.\n     * @memberof ILoggerInstance\n     */\n  getLogLevel(): LogLevel\n  /**\n     * Sets the metadata assigned to every future invocation of any of the log-methods.\n     *\n     * @param {*} metadata metadata object - can be undefined or null.\n     * @memberof ILoggerInstance\n     */\n  setMetadata(metadata: any): void\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @memberof ILoggerInstance\n     */\n  getImplementation(): T\n}\n\n/**\n * The standard logger instance implementation.\n *\n * @export\n * @class DefaultLoggerInstance\n * @implements {ILoggerInstance}\n */\nexport class DefaultLoggerInstance implements ILoggerInstance {\n  private readonly impl: LoggerImplementation;\n  private readonly name: string;\n  private readonly group: string;\n  private commonMetadata: any;\n  private logLevel: LogLevel;\n\n  /**\n     * Creates an instance of DefaultLoggerInstance.\n     *\n     * @param {string} name The name of the logger instance.\n     * @param {string} group The group of the logger instance.\n     * @param {LogLevel} logLevel The initial log-level of the logger instance.\n     * @param {commonMetadata} commonMetadata The metadata added automatically to every log operation.\n     * @param {LoggerImplementation} impl The underlying logger implementation.\n     * @memberof DefaultLoggerInstance\n     */\n  public constructor (\n    name: string,\n    group: string,\n    logLevel: LogLevel,\n    commonMetadata: any,\n    impl: LoggerImplementation) {\n    this.impl = impl\n    this.name = name\n    this.group = group\n    this.logLevel = logLevel\n    this.commonMetadata = commonMetadata\n\n    const initialConfig = LoggerConfiguration.getConfig(group, name)\n    this.impl.setConfig(initialConfig, group, name)\n  }\n\n  public getLogLevel (): LogLevel {\n    return this.logLevel\n  }\n\n  public setLogLevel (logLevel: LogLevel): void {\n    this.logLevel = logLevel\n    this.impl.setLogLevel(logLevel, this.group, this.name)\n  }\n\n  public getName (): string {\n    return this.name\n  }\n\n  public getGroup (): string {\n    return this.group\n  }\n\n  public getImpl (): LoggerImplementation {\n    return this.impl\n  }\n\n  public getMetadata (): any {\n    return this.commonMetadata\n  }\n\n  /**\n     * Sets the metadata object that is gonna be assigned to every future invocation of any log method.\n     *\n     * @param {*} commonMetadata a metadata object - can be undefined or null.\n     * @memberof DefaultLoggerInstance\n     */\n  public setMetadata (commonMetadata: any): void {\n    this.commonMetadata = commonMetadata\n    this.impl.setMetadata(commonMetadata, this.group, this.name)\n  }\n\n  public async trace (...args: any[]): Promise {\n    const metadata = [LogLevel.TRACE, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async debug (...args: any[]): Promise {\n    const metadata = [LogLevel.DEBUG, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async info (...args: any[]): Promise {\n    const metadata = [LogLevel.INFO, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async warn (...args: any[]): Promise {\n    const metadata = [LogLevel.WARN, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async error (...args: any[]): Promise {\n    const metadata = [LogLevel.ERROR, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public getImplementation(): T {\n    return this.impl.getImplementation(this.group, this.name)\n  }\n\n  private async log (logLevel: LogLevel, ...args: any[]): Promise {\n    if (logLevel  {\n    return null\n  }\n\n  public getImplementation(group: string, name: string): T {\n    return null\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    // nothing\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    // nothing\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    // nothing\n  }\n}\n\n/**\n * Used to instance an cache logger instances.\n *\n * @export\n * @class LoggerFactory\n */\nexport class LoggerFactory {\n  /**\n     * Gets a logger from cache or instances a new logger instance with the given group and name.\n     *\n     * @static\n     * @param {string} [group=\"\"] The group of the logger instance\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @returns {ILoggerInstance}\n     * @memberof LoggerFactory\n     */\n  public static getLogger (group = '', name = ''): ILoggerInstance {\n    if (!LoggerFactory.INITIALIZED) {\n      LoggerFactory.INITIALIZED = true\n      LoggerFactory.initialize()\n    }\n\n    const compoundKey = `${group}:${name}`\n    if (LoggerFactory.LOGGER_INSTANCE_CACHE.has(compoundKey)) {\n      return LoggerFactory.LOGGER_INSTANCE_CACHE.get(compoundKey)\n    }\n\n    const instance = new DefaultLoggerInstance(\n      name,\n      group,\n      LoggerConfiguration.getLogLevel(group, name),\n      LoggerFactory.COMMON_METADATA,\n      LoggerFactory.LOGGER)\n    LoggerFactory.LOGGER_INSTANCE_CACHE.set(compoundKey, instance)\n    return instance\n  }\n\n  /**\n     * Clears the logger cache and conditionally resets the logger implementation.\n     *\n     * @static\n     * @param [reinit] Causes the logger implementation to re-instantiate the logger binding if set to true.\n     * @memberof LoggerFactory\n     */\n  public static reset (reinit = false): void {\n    LoggerFactory.LOGGER_INSTANCE_CACHE.clear()\n    if (reinit) {\n      LoggerFactory.INITIALIZED = false\n    }\n  }\n\n  /**\n     * Gets the application-wide metadata object.\n     *\n     * @static\n     * @memberof LoggerFactory\n     */\n  public static getMetadata (): any {\n    return LoggerFactory.COMMON_METADATA\n  }\n\n  /**\n     * Sets the application-wide metadata object for logger instances.\n     *\n     * Every new logger will get the application-wide metadata object set.\n     *\n     * Every logger instance that sets it's own metadata object will be excluded from\n     * future updates of the application-wide metadata object.\n     *\n     * Note that this object is shared. Any changes to it will affect all logger instances\n     * using it.\n     *\n     * @static\n     * @param {*} metadata a metadata object - can be undefined or null.\n     * @memberof LoggerFactory\n     */\n  public static setMetadata (metadata: any): void {\n    const formerData = LoggerFactory.COMMON_METADATA\n    LoggerFactory.COMMON_METADATA = metadata\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      if (logger.getMetadata() === formerData) {\n        logger.setMetadata(LoggerFactory.COMMON_METADATA)\n      }\n    })\n  }\n\n  private static COMMON_METADATA: any = undefined;\n  private static LOGGER: LoggerImplementation = new NullLoggerImplementation();\n  private static ROOT_LOGGER: DefaultLoggerInstance;\n  private static INITIALIZED: boolean = false;\n  private static readonly LOGGER_INSTANCE_CACHE: Map = new Map();\n\n  private static initialize (): void {\n    const BINDINGS = new LoggerBindings().getBindings()\n    const BINDING = BINDINGS[0]\n    if (BINDINGS.length === 0) {\n      console.log('SLF4TS: No Logger Binding found')\n      return\n    }\n    LoggerFactory.LOGGER = BINDING.getLoggerImplementation()\n    LoggerFactory.ROOT_LOGGER = LoggerFactory.getLogger() as DefaultLoggerInstance\n\n    if (BINDINGS.length > 1) {\n      let message = 'multiple bindings found:'\n      BINDINGS.forEach((binding) => {\n        message += `\\n  ${binding.getVendor()} - ${binding.getVersion()}`\n      })\n      message += `\\n  using ${BINDING.getVendor()} - ${BINDING.getVersion()}`\n      LoggerFactory.ROOT_LOGGER.info(message)\n        .catch(console.error)\n    }\n\n    LoggerConfiguration.onLogLevelChanged(LoggerFactory.logLevelChanged)\n    LoggerConfiguration.onConfigChanged(LoggerFactory.configChanged)\n  }\n\n  private static logLevelChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n      if ((groupEmpty && nameEmpty) || (groupMatches && nameEmpty) || (groupMatches && nameMatches)) {\n        logger.setLogLevel(event.logLevel)\n      }\n    })\n  }\n\n  private static configChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const hasNameConfig = LoggerConfiguration.hasConfig(logger.getGroup(), logger.getName())\n      const hasGroupConfig = LoggerConfiguration.hasConfig(logger.getGroup())\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n\n      if ((groupEmpty && nameEmpty && !hasGroupConfig && !hasNameConfig) ||\n                (nameEmpty && groupMatches && !hasNameConfig) ||\n                (groupMatches && nameMatches)) {\n        logger.getImpl().setConfig(event.config, logger.getGroup(), logger.getName())\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILoggerInstance.html":{"url":"interfaces/ILoggerInstance.html","title":"interface - ILoggerInstance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILoggerInstance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing a logger instance.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    debug\n                                \n                                \n                                    error\n                                \n                                \n                                    getImplementation\n                                \n                                \n                                    getLogLevel\n                                \n                                \n                                    info\n                                \n                                \n                                    setMetadata\n                                \n                                \n                                    trace\n                                \n                                \n                                    warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \ndebug(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:28\n                \n            \n\n\n            \n                \n                    Logs the given message using DEBUG log-level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise completing when the logging-implementation processed the log statement.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            error\n                        \n                        \n                    \n                \n            \n            \n                \nerror(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:52\n                \n            \n\n\n            \n                \n                    Logs the given message using ERROR log-level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise completing when the logging-implementation processed the log statement.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \ngetImplementation()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:72\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Gets the underlying implementation of the logger.\n\n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:59\n                \n            \n\n\n            \n                \n                    Gets the current log-level.\n\n\n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        The log-level.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:36\n                \n            \n\n\n            \n                \n                    Logs the given message using INFO log-level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise completing when the logging-implementation processed the log statement.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \nsetMetadata(metadata: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:66\n                \n            \n\n\n            \n                \n                    Sets the metadata assigned to every future invocation of any of the log-methods.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        metadata object - can be undefined or null.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \ntrace(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:20\n                \n            \n\n\n            \n                \n                    Logs the given message using TRACE log-level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise completing when the logging-implementation processed the log statement.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \nwarn(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:44\n                \n            \n\n\n            \n                \n                    Logs the given message using WARN log-level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise completing when the logging-implementation processed the log statement.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { LoggerBindings, LoggerImplementation } from './LoggerBindings'\nimport { LoggerConfiguration, LogLevel } from './LoggerConfiguration'\n\n/**\n * Interface representing a logger instance.\n *\n * @export\n * @interface ILoggerInstance\n */\nexport interface ILoggerInstance {\n  /**\n     * Logs the given message using TRACE log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  trace(...args: any[]): Promise\n  /**\n     * Logs the given message using DEBUG log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  debug(...args: any[]): Promise\n  /**\n     * Logs the given message using INFO log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  info(...args: any[]): Promise\n  /**\n     * Logs the given message using WARN log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  warn(...args: any[]): Promise\n  /**\n     * Logs the given message using ERROR log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  error(...args: any[]): Promise\n  /**\n     * Gets the current log-level.\n     *\n     * @returns {LogLevel} The log-level.\n     * @memberof ILoggerInstance\n     */\n  getLogLevel(): LogLevel\n  /**\n     * Sets the metadata assigned to every future invocation of any of the log-methods.\n     *\n     * @param {*} metadata metadata object - can be undefined or null.\n     * @memberof ILoggerInstance\n     */\n  setMetadata(metadata: any): void\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @memberof ILoggerInstance\n     */\n  getImplementation(): T\n}\n\n/**\n * The standard logger instance implementation.\n *\n * @export\n * @class DefaultLoggerInstance\n * @implements {ILoggerInstance}\n */\nexport class DefaultLoggerInstance implements ILoggerInstance {\n  private readonly impl: LoggerImplementation;\n  private readonly name: string;\n  private readonly group: string;\n  private commonMetadata: any;\n  private logLevel: LogLevel;\n\n  /**\n     * Creates an instance of DefaultLoggerInstance.\n     *\n     * @param {string} name The name of the logger instance.\n     * @param {string} group The group of the logger instance.\n     * @param {LogLevel} logLevel The initial log-level of the logger instance.\n     * @param {commonMetadata} commonMetadata The metadata added automatically to every log operation.\n     * @param {LoggerImplementation} impl The underlying logger implementation.\n     * @memberof DefaultLoggerInstance\n     */\n  public constructor (\n    name: string,\n    group: string,\n    logLevel: LogLevel,\n    commonMetadata: any,\n    impl: LoggerImplementation) {\n    this.impl = impl\n    this.name = name\n    this.group = group\n    this.logLevel = logLevel\n    this.commonMetadata = commonMetadata\n\n    const initialConfig = LoggerConfiguration.getConfig(group, name)\n    this.impl.setConfig(initialConfig, group, name)\n  }\n\n  public getLogLevel (): LogLevel {\n    return this.logLevel\n  }\n\n  public setLogLevel (logLevel: LogLevel): void {\n    this.logLevel = logLevel\n    this.impl.setLogLevel(logLevel, this.group, this.name)\n  }\n\n  public getName (): string {\n    return this.name\n  }\n\n  public getGroup (): string {\n    return this.group\n  }\n\n  public getImpl (): LoggerImplementation {\n    return this.impl\n  }\n\n  public getMetadata (): any {\n    return this.commonMetadata\n  }\n\n  /**\n     * Sets the metadata object that is gonna be assigned to every future invocation of any log method.\n     *\n     * @param {*} commonMetadata a metadata object - can be undefined or null.\n     * @memberof DefaultLoggerInstance\n     */\n  public setMetadata (commonMetadata: any): void {\n    this.commonMetadata = commonMetadata\n    this.impl.setMetadata(commonMetadata, this.group, this.name)\n  }\n\n  public async trace (...args: any[]): Promise {\n    const metadata = [LogLevel.TRACE, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async debug (...args: any[]): Promise {\n    const metadata = [LogLevel.DEBUG, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async info (...args: any[]): Promise {\n    const metadata = [LogLevel.INFO, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async warn (...args: any[]): Promise {\n    const metadata = [LogLevel.WARN, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async error (...args: any[]): Promise {\n    const metadata = [LogLevel.ERROR, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public getImplementation(): T {\n    return this.impl.getImplementation(this.group, this.name)\n  }\n\n  private async log (logLevel: LogLevel, ...args: any[]): Promise {\n    if (logLevel  {\n    return null\n  }\n\n  public getImplementation(group: string, name: string): T {\n    return null\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    // nothing\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    // nothing\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    // nothing\n  }\n}\n\n/**\n * Used to instance an cache logger instances.\n *\n * @export\n * @class LoggerFactory\n */\nexport class LoggerFactory {\n  /**\n     * Gets a logger from cache or instances a new logger instance with the given group and name.\n     *\n     * @static\n     * @param {string} [group=\"\"] The group of the logger instance\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @returns {ILoggerInstance}\n     * @memberof LoggerFactory\n     */\n  public static getLogger (group = '', name = ''): ILoggerInstance {\n    if (!LoggerFactory.INITIALIZED) {\n      LoggerFactory.INITIALIZED = true\n      LoggerFactory.initialize()\n    }\n\n    const compoundKey = `${group}:${name}`\n    if (LoggerFactory.LOGGER_INSTANCE_CACHE.has(compoundKey)) {\n      return LoggerFactory.LOGGER_INSTANCE_CACHE.get(compoundKey)\n    }\n\n    const instance = new DefaultLoggerInstance(\n      name,\n      group,\n      LoggerConfiguration.getLogLevel(group, name),\n      LoggerFactory.COMMON_METADATA,\n      LoggerFactory.LOGGER)\n    LoggerFactory.LOGGER_INSTANCE_CACHE.set(compoundKey, instance)\n    return instance\n  }\n\n  /**\n     * Clears the logger cache and conditionally resets the logger implementation.\n     *\n     * @static\n     * @param [reinit] Causes the logger implementation to re-instantiate the logger binding if set to true.\n     * @memberof LoggerFactory\n     */\n  public static reset (reinit = false): void {\n    LoggerFactory.LOGGER_INSTANCE_CACHE.clear()\n    if (reinit) {\n      LoggerFactory.INITIALIZED = false\n    }\n  }\n\n  /**\n     * Gets the application-wide metadata object.\n     *\n     * @static\n     * @memberof LoggerFactory\n     */\n  public static getMetadata (): any {\n    return LoggerFactory.COMMON_METADATA\n  }\n\n  /**\n     * Sets the application-wide metadata object for logger instances.\n     *\n     * Every new logger will get the application-wide metadata object set.\n     *\n     * Every logger instance that sets it's own metadata object will be excluded from\n     * future updates of the application-wide metadata object.\n     *\n     * Note that this object is shared. Any changes to it will affect all logger instances\n     * using it.\n     *\n     * @static\n     * @param {*} metadata a metadata object - can be undefined or null.\n     * @memberof LoggerFactory\n     */\n  public static setMetadata (metadata: any): void {\n    const formerData = LoggerFactory.COMMON_METADATA\n    LoggerFactory.COMMON_METADATA = metadata\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      if (logger.getMetadata() === formerData) {\n        logger.setMetadata(LoggerFactory.COMMON_METADATA)\n      }\n    })\n  }\n\n  private static COMMON_METADATA: any = undefined;\n  private static LOGGER: LoggerImplementation = new NullLoggerImplementation();\n  private static ROOT_LOGGER: DefaultLoggerInstance;\n  private static INITIALIZED: boolean = false;\n  private static readonly LOGGER_INSTANCE_CACHE: Map = new Map();\n\n  private static initialize (): void {\n    const BINDINGS = new LoggerBindings().getBindings()\n    const BINDING = BINDINGS[0]\n    if (BINDINGS.length === 0) {\n      console.log('SLF4TS: No Logger Binding found')\n      return\n    }\n    LoggerFactory.LOGGER = BINDING.getLoggerImplementation()\n    LoggerFactory.ROOT_LOGGER = LoggerFactory.getLogger() as DefaultLoggerInstance\n\n    if (BINDINGS.length > 1) {\n      let message = 'multiple bindings found:'\n      BINDINGS.forEach((binding) => {\n        message += `\\n  ${binding.getVendor()} - ${binding.getVersion()}`\n      })\n      message += `\\n  using ${BINDING.getVendor()} - ${BINDING.getVersion()}`\n      LoggerFactory.ROOT_LOGGER.info(message)\n        .catch(console.error)\n    }\n\n    LoggerConfiguration.onLogLevelChanged(LoggerFactory.logLevelChanged)\n    LoggerConfiguration.onConfigChanged(LoggerFactory.configChanged)\n  }\n\n  private static logLevelChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n      if ((groupEmpty && nameEmpty) || (groupMatches && nameEmpty) || (groupMatches && nameMatches)) {\n        logger.setLogLevel(event.logLevel)\n      }\n    })\n  }\n\n  private static configChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const hasNameConfig = LoggerConfiguration.hasConfig(logger.getGroup(), logger.getName())\n      const hasGroupConfig = LoggerConfiguration.hasConfig(logger.getGroup())\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n\n      if ((groupEmpty && nameEmpty && !hasGroupConfig && !hasNameConfig) ||\n                (nameEmpty && groupMatches && !hasNameConfig) ||\n                (groupMatches && nameMatches)) {\n        logger.getImpl().setConfig(event.config, logger.getGroup(), logger.getName())\n      }\n    })\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Log4JSLoggerBinding.html":{"url":"classes/Log4JSLoggerBinding.html","title":"class - Log4JSLoggerBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Log4JSLoggerBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts\n        \n\n            \n                Description\n            \n            \n                LoggerBinding implementation for Log4JS.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerBinding\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                packageJson\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getLoggerImplementation\n                            \n                            \n                                    Public\n                                getVendor\n                            \n                            \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            packageJson\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLoggerImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLoggerImplementation()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         LoggerImplementation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVendor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVendor()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVersion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport {\n  LoggerBinding,\n  LoggerImplementation\n} from 'slf4ts-api'\n\nimport { Log4JSLoggerImplementation } from './Log4JSLoggerImplementation'\n\n/**\n * LoggerBinding implementation for Log4JS.\n *\n * @export\n * @class Log4JSLoggerBinding\n * @implements {LoggerBinding}\n */\nexport class Log4JSLoggerBinding implements LoggerBinding {\n  private readonly packageJson: any;\n\n  public constructor () {\n    const modulePath = path.parse(module.filename)\n    let currentDir = path.resolve(modulePath.dir)\n    while (true) {\n      currentDir = path.resolve(path.join(currentDir, '..'))\n      const packageJsonPath = path.resolve(path.join(currentDir, 'package.json'))\n      if (fs.existsSync(packageJsonPath)) {\n        this.packageJson = require(packageJsonPath)\n        break\n      }\n    }\n  }\n\n  public getLoggerImplementation (): LoggerImplementation {\n    return new Log4JSLoggerImplementation()\n  }\n\n  public getVendor (): string {\n    return 'log4js'\n  }\n\n  public getVersion (): string {\n    return this.packageJson.version\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Log4JSLoggerImplementation.html":{"url":"classes/Log4JSLoggerImplementation.html","title":"class - Log4JSLoggerImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Log4JSLoggerImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts\n        \n\n            \n                Description\n            \n            \n                The actual log4js logger implementation.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerImplementation\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getImplementation\n                            \n                            \n                                    Private\n                                getLoggerInstance\n                            \n                            \n                                    Public\n                                    Async\n                                log\n                            \n                            \n                                    Public\n                                setConfig\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            loggers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImplementation(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getLoggerInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLoggerInstance(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Logger\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setConfig(config: T, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(logLevel: LogLevel, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(metadata: any, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { LoggerImplementation, LogLevel } from 'slf4ts-api'\nimport { getLogger, Logger } from 'log4js'\n\nconst LogLevelMapping: string[] = []\n\nLogLevelMapping[LogLevel.TRACE] = 'TRACE'\nLogLevelMapping[LogLevel.DEBUG] = 'DEBUG'\nLogLevelMapping[LogLevel.INFO] = 'INFO'\nLogLevelMapping[LogLevel.WARN] = 'WARN'\nLogLevelMapping[LogLevel.ERROR] = 'ERROR'\n\n/**\n * The actual log4js logger implementation.\n *\n * @export\n * @class Log4JSLoggerImplementation\n * @implements {LoggerImplementation}\n */\nexport class Log4JSLoggerImplementation implements LoggerImplementation {\n  private readonly loggers: Map = new Map();\n\n  public async log (...args: any[]): Promise {\n    const additionalArguments = [...arguments]\n    const commonLoggerData = additionalArguments.splice(0, 3)\n    // remove metadata\n    additionalArguments.splice(additionalArguments.length - 1, 1)\n    const level: number = commonLoggerData[0]\n    const group: string = commonLoggerData[1]\n    const name: string = commonLoggerData[2]\n    const instance = this.getLoggerInstance(group, name)\n    const callArguments: any[] = [LogLevelMapping[level]]\n      .concat(...additionalArguments)\n\n    return new Promise((resolve, reject) => {\n      instance.log(...callArguments)\n      resolve()\n    })\n  }\n\n  public getImplementation (group: string, name: string): any {\n    return this.getLoggerInstance(group, name)\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    // nothing to configure here\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    const instance = this.getLoggerInstance(group, name)\n    instance.level = LogLevelMapping[logLevel]\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    const instance = this.getLoggerInstance(group, name)\n    instance.clearContext()\n    if (metadata) {\n      Object.entries(metadata).forEach(([key, value]) => {\n        instance.addContext(key, value)\n      })\n    }\n  }\n\n  private getLoggerInstance (group: string, name: string): Logger {\n    const compoundKey = `${group}:${name}`\n    let instance: Logger = this.loggers.get(compoundKey)\n\n    if (!instance) {\n      instance = getLogger(compoundKey)\n      this.loggers.set(compoundKey, instance)\n    }\n\n    return instance\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerBinding.html":{"url":"interfaces/LoggerBinding.html","title":"interface - LoggerBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggerBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n        \n\n            \n                Description\n            \n            \n                A metadata object for a binding.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getLoggerImplementation\n                                \n                                \n                                    getVendor\n                                \n                                \n                                    getVersion\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLoggerImplementation\n                        \n                        \n                    \n                \n            \n            \n                \ngetLoggerImplementation()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:81\n                \n            \n\n\n            \n                \n                    Gets the logger implementation.\n\n\n                    \n                    \n                    \n                        Returns :         LoggerImplementation\n\n                    \n                    \n                        The logger implementation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVendor\n                        \n                        \n                    \n                \n            \n            \n                \ngetVendor()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:88\n                \n            \n\n\n            \n                \n                    Gets the vendor string.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The vendor name.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVersion\n                        \n                        \n                    \n                \n            \n            \n                \ngetVersion()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:95\n                \n            \n\n\n            \n                \n                    Gets the version string.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The version number.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nimport { LogLevel } from './LoggerConfiguration'\n\n/**\n * The bridge to the underlying logging-framework.\n *\n * @export\n * @interface LoggerImplementation\n */\nexport interface LoggerImplementation {\n\n  /**\n     * Invoked for each call to a logging method of a logger instance.\n     *\n     * @param {...any[]} args array with log-level, group, name and all arguments passed to the logging function.\n     * @returns A Promise completed when the log statement was processed by the underlying logging-framework.\n     * @memberof LoggerImplementation\n     */\n  log(...args: any[]): Promise\n\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @template T Type of logger instance.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  getImplementation(group: string, name: string): T\n\n  /**\n     * Sets the configuration for the specified logger instance.\n     *\n     * @template T Type of config object\n     * @param {T} config The implementation-specific configuration.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setConfig(config: T, group: string, name: string): void\n\n  /**\n     * Informs the logger implementation of the log-level change.\n     *\n     * @param {LogLevel} logLevel The new log level.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setLogLevel(logLevel: LogLevel, group: string, name: string): void\n\n  /**\n     * Informs the logger implementation of the metadata change.\n     *\n     * @param {any} metadata The new metadata.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setMetadata(metadata: any, group: string, name: string): void\n\n}\n\n/**\n * A metadata object for a binding.\n *\n * @export\n * @interface LoggerBinding\n */\nexport interface LoggerBinding {\n  /**\n     * Gets the logger implementation.\n     *\n     * @returns {LoggerImplementation} The logger implementation.\n     * @memberof LoggerBinding\n     */\n  getLoggerImplementation(): LoggerImplementation\n  /**\n     * Gets the vendor string.\n     *\n     * @returns {string} The vendor name.\n     * @memberof LoggerBinding\n     */\n  getVendor(): string\n  /**\n     * Gets the version string.\n     *\n     * @returns {string} The version number.\n     * @memberof LoggerBinding\n     */\n  getVersion(): string\n}\n\n/**\n * Encapsulates the loading of logger bindings from NODE_PATH.\n *\n * Additionally the location of other logging-framework bindings can\n * be configured using the environment variable 'LOGGER_BINDING_ADDITIONAL_PATH'.\n *\n * For each folder - containing a file named '.slf4ts-binding' in 'NODE_PATH',\n * 'LOGGER_BINDING_ADDITIONAL_PATH' or the additional search paths given to\n * LoggerBindings - LoggerBindings loads the node-module and invokes the function\n * that is the default export of the entire module for registration.\n *\n * @export\n * @class LoggerBindings\n */\nexport class LoggerBindings {\n  /**\n     * Array of loaded bindings.\n     *\n     * @private\n     * @type {LoggerBinding[]}\n     * @memberof LoggerBindings\n     */\n  private readonly bindings: LoggerBinding[] = [];\n\n  /**\n     * Creates an instance of LoggerBindings.\n     *\n     * @param {string[]} [additionalPaths=[]] A string array with additional paths to search bindings.\n     * @memberof LoggerBindings\n     */\n  public constructor (additionalPaths: string[] = []) {\n    if ('LOGGER_BINDING_ADDITIONAL_PATH' in process.env) {\n      additionalPaths.push(process.env.LOGGER_BINDING_ADDITIONAL_PATH)\n    }\n    if ('mainModule' in process && 'paths' in process.mainModule) {\n      process.mainModule.paths\n        .forEach((mainPath) => additionalPaths.push(mainPath))\n    }\n\n    const moduleFolders: string[] = this.getAllModuleFolders(additionalPaths)\n    const loggerBindings: string[] = this.getAllLoggerBindings(moduleFolders)\n\n    loggerBindings.forEach((binding) => {\n      const registerFunc = require.main.require(binding)\n      registerFunc(this)\n    })\n  }\n\n  /**\n     * Used to register a logging-framework binding.\n     *\n     * @param {LoggerBinding} binding The LoggerBinding to register.\n     * @returns\n     * @memberof LoggerBindings\n     */\n  public registerBinding (binding: LoggerBinding): void {\n    const exists = this.bindings.filter((b) => {\n      const vendorEquals = b.getVendor() === binding.getVendor()\n      const versionEquals = b.getVersion() === binding.getVersion()\n      return vendorEquals && versionEquals\n    }).length > 0\n\n    if (exists) {\n      return\n    }\n\n    this.bindings.push(binding)\n  }\n\n  /**\n     * Gets a copy of all {@link LoggerBinding}\n     *\n     * @returns {LoggerBinding[]}\n     * @memberof LoggerBindings\n     */\n  public getBindings (): LoggerBinding[] {\n    return [].concat(this.bindings)\n  }\n\n  private getAllModuleFolders (additionalPaths: string[]): string[] {\n    const rootPaths: string[] = (module as any).paths\n    const moduleFolders: string[] = []\n\n    rootPaths.concat(additionalPaths).forEach((rootPath) =>\n      this.visitNodeModules(rootPath).forEach((folder) => moduleFolders.push(folder)))\n\n    return moduleFolders\n  }\n\n  private visitNodeModules (rootPath: string): string[] {\n    const moduleFolders: string[] = []\n\n    if (fs.existsSync(rootPath)) {\n      const files = fs.readdirSync(rootPath)\n      files.forEach((folder) => {\n        const absolutePath = path.join(rootPath, folder)\n        moduleFolders.push(absolutePath)\n        this.visitNodeModules(path.join(absolutePath, 'node_modules'))\n          .forEach((subfolder) => moduleFolders.push(subfolder))\n      })\n    }\n\n    return moduleFolders\n  }\n\n  private getAllLoggerBindings (moduleFolders: string[]): string[] {\n    const bindings: string[] = []\n\n    moduleFolders.forEach((moduleFolder) => {\n      if (fs.existsSync(path.join(moduleFolder, '.slf4ts-binding'))) {\n        bindings.push(path.basename(moduleFolder))\n      }\n    })\n\n    return bindings\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerBindings.html":{"url":"classes/LoggerBindings.html","title":"class - LoggerBindings","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerBindings\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n        \n\n            \n                Description\n            \n            \n                Encapsulates the loading of logger bindings from NODE_PATH.\nAdditionally the location of other logging-framework bindings can\nbe configured using the environment variable 'LOGGER_BINDING_ADDITIONAL_PATH'.\nFor each folder - containing a file named '.slf4ts-binding' in 'NODE_PATH',\n'LOGGER_BINDING_ADDITIONAL_PATH' or the additional search paths given to\nLoggerBindings - LoggerBindings loads the node-module and invokes the function\nthat is the default export of the entire module for registration.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bindings\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getAllLoggerBindings\n                            \n                            \n                                    Private\n                                getAllModuleFolders\n                            \n                            \n                                    Public\n                                getBindings\n                            \n                            \n                                    Public\n                                registerBinding\n                            \n                            \n                                    Private\n                                visitNodeModules\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(additionalPaths: string[])\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:120\n                            \n                        \n\n                \n                    \n                            Creates an instance of LoggerBindings.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        additionalPaths\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A string array with additional paths to search bindings.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bindings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoggerBinding[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:120\n                            \n                        \n\n                \n                    \n                        Array of loaded bindings.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getAllLoggerBindings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLoggerBindings(moduleFolders: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    moduleFolders\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getAllModuleFolders\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllModuleFolders(additionalPaths: string[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    additionalPaths\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBindings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBindings()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:173\n                \n            \n\n\n            \n                \n                    Gets a copy of all LoggerBinding\n\n\n                    \n                    \n                    \n                        Returns :         LoggerBinding[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            registerBinding\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerBinding(binding: LoggerBinding)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:153\n                \n            \n\n\n            \n                \n                    Used to register a logging-framework binding.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    binding\n                                    \n                                                LoggerBinding\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The LoggerBinding to register.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            visitNodeModules\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    visitNodeModules(rootPath: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rootPath\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nimport { LogLevel } from './LoggerConfiguration'\n\n/**\n * The bridge to the underlying logging-framework.\n *\n * @export\n * @interface LoggerImplementation\n */\nexport interface LoggerImplementation {\n\n  /**\n     * Invoked for each call to a logging method of a logger instance.\n     *\n     * @param {...any[]} args array with log-level, group, name and all arguments passed to the logging function.\n     * @returns A Promise completed when the log statement was processed by the underlying logging-framework.\n     * @memberof LoggerImplementation\n     */\n  log(...args: any[]): Promise\n\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @template T Type of logger instance.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  getImplementation(group: string, name: string): T\n\n  /**\n     * Sets the configuration for the specified logger instance.\n     *\n     * @template T Type of config object\n     * @param {T} config The implementation-specific configuration.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setConfig(config: T, group: string, name: string): void\n\n  /**\n     * Informs the logger implementation of the log-level change.\n     *\n     * @param {LogLevel} logLevel The new log level.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setLogLevel(logLevel: LogLevel, group: string, name: string): void\n\n  /**\n     * Informs the logger implementation of the metadata change.\n     *\n     * @param {any} metadata The new metadata.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setMetadata(metadata: any, group: string, name: string): void\n\n}\n\n/**\n * A metadata object for a binding.\n *\n * @export\n * @interface LoggerBinding\n */\nexport interface LoggerBinding {\n  /**\n     * Gets the logger implementation.\n     *\n     * @returns {LoggerImplementation} The logger implementation.\n     * @memberof LoggerBinding\n     */\n  getLoggerImplementation(): LoggerImplementation\n  /**\n     * Gets the vendor string.\n     *\n     * @returns {string} The vendor name.\n     * @memberof LoggerBinding\n     */\n  getVendor(): string\n  /**\n     * Gets the version string.\n     *\n     * @returns {string} The version number.\n     * @memberof LoggerBinding\n     */\n  getVersion(): string\n}\n\n/**\n * Encapsulates the loading of logger bindings from NODE_PATH.\n *\n * Additionally the location of other logging-framework bindings can\n * be configured using the environment variable 'LOGGER_BINDING_ADDITIONAL_PATH'.\n *\n * For each folder - containing a file named '.slf4ts-binding' in 'NODE_PATH',\n * 'LOGGER_BINDING_ADDITIONAL_PATH' or the additional search paths given to\n * LoggerBindings - LoggerBindings loads the node-module and invokes the function\n * that is the default export of the entire module for registration.\n *\n * @export\n * @class LoggerBindings\n */\nexport class LoggerBindings {\n  /**\n     * Array of loaded bindings.\n     *\n     * @private\n     * @type {LoggerBinding[]}\n     * @memberof LoggerBindings\n     */\n  private readonly bindings: LoggerBinding[] = [];\n\n  /**\n     * Creates an instance of LoggerBindings.\n     *\n     * @param {string[]} [additionalPaths=[]] A string array with additional paths to search bindings.\n     * @memberof LoggerBindings\n     */\n  public constructor (additionalPaths: string[] = []) {\n    if ('LOGGER_BINDING_ADDITIONAL_PATH' in process.env) {\n      additionalPaths.push(process.env.LOGGER_BINDING_ADDITIONAL_PATH)\n    }\n    if ('mainModule' in process && 'paths' in process.mainModule) {\n      process.mainModule.paths\n        .forEach((mainPath) => additionalPaths.push(mainPath))\n    }\n\n    const moduleFolders: string[] = this.getAllModuleFolders(additionalPaths)\n    const loggerBindings: string[] = this.getAllLoggerBindings(moduleFolders)\n\n    loggerBindings.forEach((binding) => {\n      const registerFunc = require.main.require(binding)\n      registerFunc(this)\n    })\n  }\n\n  /**\n     * Used to register a logging-framework binding.\n     *\n     * @param {LoggerBinding} binding The LoggerBinding to register.\n     * @returns\n     * @memberof LoggerBindings\n     */\n  public registerBinding (binding: LoggerBinding): void {\n    const exists = this.bindings.filter((b) => {\n      const vendorEquals = b.getVendor() === binding.getVendor()\n      const versionEquals = b.getVersion() === binding.getVersion()\n      return vendorEquals && versionEquals\n    }).length > 0\n\n    if (exists) {\n      return\n    }\n\n    this.bindings.push(binding)\n  }\n\n  /**\n     * Gets a copy of all {@link LoggerBinding}\n     *\n     * @returns {LoggerBinding[]}\n     * @memberof LoggerBindings\n     */\n  public getBindings (): LoggerBinding[] {\n    return [].concat(this.bindings)\n  }\n\n  private getAllModuleFolders (additionalPaths: string[]): string[] {\n    const rootPaths: string[] = (module as any).paths\n    const moduleFolders: string[] = []\n\n    rootPaths.concat(additionalPaths).forEach((rootPath) =>\n      this.visitNodeModules(rootPath).forEach((folder) => moduleFolders.push(folder)))\n\n    return moduleFolders\n  }\n\n  private visitNodeModules (rootPath: string): string[] {\n    const moduleFolders: string[] = []\n\n    if (fs.existsSync(rootPath)) {\n      const files = fs.readdirSync(rootPath)\n      files.forEach((folder) => {\n        const absolutePath = path.join(rootPath, folder)\n        moduleFolders.push(absolutePath)\n        this.visitNodeModules(path.join(absolutePath, 'node_modules'))\n          .forEach((subfolder) => moduleFolders.push(subfolder))\n      })\n    }\n\n    return moduleFolders\n  }\n\n  private getAllLoggerBindings (moduleFolders: string[]): string[] {\n    const bindings: string[] = []\n\n    moduleFolders.forEach((moduleFolder) => {\n      if (fs.existsSync(path.join(moduleFolder, '.slf4ts-binding'))) {\n        bindings.push(path.basename(moduleFolder))\n      }\n    })\n\n    return bindings\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerConfigurationImpl.html":{"url":"classes/LoggerConfigurationImpl.html","title":"class - LoggerConfigurationImpl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerConfigurationImpl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                configMapping\n                            \n                            \n                                    Private\n                                defaultLogLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                events\n                            \n                            \n                                    Private\n                                    Readonly\n                                logLevelMapping\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getConfig\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                hasConfig\n                            \n                            \n                                    Public\n                                onConfigChanged\n                            \n                            \n                                    Public\n                                onLogLevelChanged\n                            \n                            \n                                    Public\n                                removeAllListeners\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                setConfig\n                            \n                            \n                                    Public\n                                setDefaultLogLevel\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            configMapping\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultLogLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LogLevel\n\n                        \n                    \n                    \n                        \n                            Default value : LogLevel.INFO\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logLevelMapping\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:27\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getConfig(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:108\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Set the implementation-specific config for the given group and name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The group of the logger instance.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:41\n                \n            \n\n\n            \n                \n                    Gets the log-level for the given group and name.\nIf no log-level is found for the given group and name the default log-level is returned.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The group of the logger.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The name of the logger.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        the log-level for the logger.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasConfig(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:172\n                \n            \n\n\n            \n                \n                    Checks if the config for a certain logger is present.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The group of the logger instance.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onConfigChanged\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onConfigChanged(callback: (args: any[]) => void, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:137\n                \n            \n\n\n            \n                \n                    Registers a new listener for configuration changes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The listener callback.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        (Deprecated - Ignored and will be removed) The group of the logger instance.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        (Deprecated - Ignored and will be removed) The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onLogLevelChanged\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onLogLevelChanged(callback: (args: any[]) => void, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:124\n                \n            \n\n\n            \n                \n                    Registers a new listener for log-level changes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The listener callback.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        (Deprecated - Ignored and will be removed) The group of the logger instance.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        (Deprecated - Ignored and will be removed) The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeAllListeners\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeAllListeners()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:147\n                \n            \n\n\n            \n                \n                    Removes all listeners.\n\n\n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:157\n                \n            \n\n\n            \n                \n                    Removes all listeners, clears all log-level configurations and sets the default-log-level to INFO.\n\n\n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setConfig(config: T, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:89\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Set the implementation-specific config for the given group and name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The implementation-specific config for the specified logger.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The group of the logger instance.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDefaultLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDefaultLogLevel(defaultLogLevel: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:57\n                \n            \n\n\n            \n                \n                    Sets the default log-level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    defaultLogLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(logLevel: LogLevel, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts:70\n                \n            \n\n\n            \n                \n                    Set the log-level for the given group and name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The new log-level.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The group of the logger instance.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LoggerConfigurationImpl\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { EventEmitter } from 'events'\n\n/**\n * LogLevel enumeration.\n *\n * @export\n * @enum {number}\n */\nexport enum LogLevel {\n  ERROR = 0,\n  WARN,\n  INFO,\n  DEBUG,\n  TRACE,\n}\n\n/**\n *\n *\n * @export\n * @class LoggerConfigurationImpl\n */\nexport class LoggerConfigurationImpl {\n  private readonly events: EventEmitter = new EventEmitter();\n  private readonly logLevelMapping: Map = new Map();\n  private readonly configMapping: Map = new Map();\n  private defaultLogLevel: LogLevel = LogLevel.INFO;\n\n  /**\n     * Gets the log-level for the given group and name.\n     *\n     * If no log-level is found for the given group and name the default log-level is returned.\n     *\n     * @param {string} [group=\"\"] The group of the logger.\n     * @param {string} [name=\"\"] The name of the logger.\n     * @returns {LogLevel} the log-level for the logger.\n     * @memberof LoggerConfigurationImpl\n     */\n  public getLogLevel (group = '', name = ''): LogLevel {\n    const compoundKey = `${group}:${name}`\n\n    if (this.logLevelMapping.has(compoundKey)) {\n      return this.logLevelMapping.get(compoundKey)\n    }\n\n    return this.defaultLogLevel\n  }\n\n  /**\n     * Sets the default log-level.\n     *\n     * @param {LogLevel} defaultLogLevel\n     * @memberof LoggerConfigurationImpl\n     */\n  public setDefaultLogLevel (defaultLogLevel: LogLevel): LoggerConfigurationImpl {\n    this.defaultLogLevel = defaultLogLevel\n    return this\n  }\n\n  /**\n     * Set the log-level for the given group and name.\n     *\n     * @param {LogLevel} logLevel The new log-level.\n     * @param {string} [group=\"\"] The group of the logger instance.\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @memberof LoggerConfigurationImpl\n     */\n  public setLogLevel (logLevel: LogLevel, group = '', name = ''): LoggerConfigurationImpl {\n    const event = { group, logLevel, name }\n    const compoundKey = `${group}:${name}`\n\n    this.logLevelMapping.set(compoundKey, logLevel)\n    this.events.emit('changed:log-level', event)\n\n    return this\n  }\n\n  /**\n     * Set the implementation-specific config for the given group and name.\n     *\n     * @template T Type of config.\n     * @param {T} config The implementation-specific config for the specified logger.\n     * @param {string} [group=\"\"] The group of the logger instance.\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @memberof LoggerConfigurationImpl\n     */\n  public setConfig(config: T, group = '', name = ''): LoggerConfigurationImpl {\n    const event = { group, config, name }\n    const compoundKey = `${group}:${name}`\n\n    this.configMapping.set(compoundKey, config)\n    this.events.emit('changed:config', event)\n\n    return this\n  }\n\n  /**\n     * Set the implementation-specific config for the given group and name.\n     *\n     * @template T Type of config.\n     * @param {T} config The implementation-specific config for the specified logger.\n     * @param {string} [group=\"\"] The group of the logger instance.\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @memberof LoggerConfigurationImpl\n     */\n  public getConfig(group = '', name = ''): T {\n    /* eslint-disable @typescript-eslint/strict-boolean-expressions */\n    return this.configMapping.get(`${group}:${name}`) ||\n           this.configMapping.get(`${group}:`) ||\n           this.configMapping.get(':')\n    /* eslint-disable @typescript-eslint/strict-boolean-expressions */\n  }\n\n  /**\n     * Registers a new listener for log-level changes.\n     *\n     * @param {(...args: any[]) => void} callback The listener callback.\n     * @param {string} [group=\"\"] (Deprecated - Ignored and will be removed) The group of the logger instance.\n     * @param {string} [name=\"\"] (Deprecated - Ignored and will be removed) The name of the logger instance.\n     * @memberof LoggerConfigurationImpl\n     */\n  public onLogLevelChanged (callback: (...args: any[]) => void, group = '', name = ''): LoggerConfigurationImpl {\n    this.events.on('changed:log-level', callback)\n    return this\n  }\n\n  /**\n     * Registers a new listener for configuration changes.\n     *\n     * @param {(...args: any[]) => void} callback The listener callback.\n     * @param {string} [group=\"\"] (Deprecated - Ignored and will be removed) The group of the logger instance.\n     * @param {string} [name=\"\"] (Deprecated - Ignored and will be removed) The name of the logger instance.\n     * @memberof LoggerConfigurationImpl\n     */\n  public onConfigChanged (callback: (...args: any[]) => void, group = '', name = ''): LoggerConfigurationImpl {\n    this.events.on('changed:config', callback)\n    return this\n  }\n\n  /**\n     * Removes all listeners.\n     *\n     * @memberof LoggerConfigurationImpl\n     */\n  public removeAllListeners (): LoggerConfigurationImpl {\n    this.events.removeAllListeners()\n    return this\n  }\n\n  /**\n     * Removes all listeners, clears all log-level configurations and sets the default-log-level to INFO.\n     *\n     * @memberof LoggerConfigurationImpl\n     */\n  public reset (): LoggerConfigurationImpl {\n    this.events.removeAllListeners()\n    this.logLevelMapping.clear()\n    this.configMapping.clear()\n    this.defaultLogLevel = LogLevel.INFO\n    return this\n  }\n\n  /**\n     * Checks if the config for a certain logger is present.\n     *\n     * @param {string} [group=\"\"] The group of the logger instance.\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @memberof LoggerConfigurationImpl\n     */\n  public hasConfig (group = '', name = ''): boolean {\n    const compoundKey = `${group}:${name}`\n    return this.configMapping.has(compoundKey)\n  }\n}\n\n/**\n * Default configuration instance\n */\nexport const LoggerConfiguration = new LoggerConfigurationImpl()\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerFactory.html":{"url":"classes/LoggerFactory.html","title":"class - LoggerFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n        \n\n            \n                Description\n            \n            \n                Used to instance an cache logger instances.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COMMON_METADATA\n                            \n                            \n                                    Private\n                                    Static\n                                INITIALIZED\n                            \n                            \n                                    Private\n                                    Static\n                                LOGGER\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                LOGGER_INSTANCE_CACHE\n                            \n                            \n                                    Private\n                                    Static\n                                ROOT_LOGGER\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                configChanged\n                            \n                            \n                                    Static\n                                getLogger\n                            \n                            \n                                    Static\n                                getMetadata\n                            \n                            \n                                    Private\n                                    Static\n                                initialize\n                            \n                            \n                                    Private\n                                    Static\n                                logLevelChanged\n                            \n                            \n                                    Static\n                                reset\n                            \n                            \n                                    Static\n                                setMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COMMON_METADATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : undefined\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:301\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            INITIALIZED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:304\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            LOGGER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LoggerImplementation\n\n                        \n                    \n                    \n                        \n                            Default value : new NullLoggerImplementation()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:302\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                                Readonly\n                            LOGGER_INSTANCE_CACHE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:305\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            ROOT_LOGGER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DefaultLoggerInstance\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:303\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            configChanged\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configChanged(event: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:343\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:231\n                \n            \n\n\n            \n                \n                    Gets a logger from cache or instances a new logger instance with the given group and name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The group of the logger instance\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        The name of the logger instance.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ILoggerInstance\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetadata()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:272\n                \n            \n\n\n            \n                \n                    Gets the application-wide metadata object.\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            logLevelChanged\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logLevelChanged(event: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset(reinit)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:259\n                \n            \n\n\n            \n                \n                    Clears the logger cache and conditionally resets the logger implementation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    reinit\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        Causes the logger implementation to re-instantiate the logger binding if set to true.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(metadata: any)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:291\n                \n            \n\n\n            \n                \n                    Sets the application-wide metadata object for logger instances.\nEvery new logger will get the application-wide metadata object set.\nEvery logger instance that sets it's own metadata object will be excluded from\nfuture updates of the application-wide metadata object.\nNote that this object is shared. Any changes to it will affect all logger instances\nusing it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a metadata object - can be undefined or null.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { LoggerBindings, LoggerImplementation } from './LoggerBindings'\nimport { LoggerConfiguration, LogLevel } from './LoggerConfiguration'\n\n/**\n * Interface representing a logger instance.\n *\n * @export\n * @interface ILoggerInstance\n */\nexport interface ILoggerInstance {\n  /**\n     * Logs the given message using TRACE log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  trace(...args: any[]): Promise\n  /**\n     * Logs the given message using DEBUG log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  debug(...args: any[]): Promise\n  /**\n     * Logs the given message using INFO log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  info(...args: any[]): Promise\n  /**\n     * Logs the given message using WARN log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  warn(...args: any[]): Promise\n  /**\n     * Logs the given message using ERROR log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  error(...args: any[]): Promise\n  /**\n     * Gets the current log-level.\n     *\n     * @returns {LogLevel} The log-level.\n     * @memberof ILoggerInstance\n     */\n  getLogLevel(): LogLevel\n  /**\n     * Sets the metadata assigned to every future invocation of any of the log-methods.\n     *\n     * @param {*} metadata metadata object - can be undefined or null.\n     * @memberof ILoggerInstance\n     */\n  setMetadata(metadata: any): void\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @memberof ILoggerInstance\n     */\n  getImplementation(): T\n}\n\n/**\n * The standard logger instance implementation.\n *\n * @export\n * @class DefaultLoggerInstance\n * @implements {ILoggerInstance}\n */\nexport class DefaultLoggerInstance implements ILoggerInstance {\n  private readonly impl: LoggerImplementation;\n  private readonly name: string;\n  private readonly group: string;\n  private commonMetadata: any;\n  private logLevel: LogLevel;\n\n  /**\n     * Creates an instance of DefaultLoggerInstance.\n     *\n     * @param {string} name The name of the logger instance.\n     * @param {string} group The group of the logger instance.\n     * @param {LogLevel} logLevel The initial log-level of the logger instance.\n     * @param {commonMetadata} commonMetadata The metadata added automatically to every log operation.\n     * @param {LoggerImplementation} impl The underlying logger implementation.\n     * @memberof DefaultLoggerInstance\n     */\n  public constructor (\n    name: string,\n    group: string,\n    logLevel: LogLevel,\n    commonMetadata: any,\n    impl: LoggerImplementation) {\n    this.impl = impl\n    this.name = name\n    this.group = group\n    this.logLevel = logLevel\n    this.commonMetadata = commonMetadata\n\n    const initialConfig = LoggerConfiguration.getConfig(group, name)\n    this.impl.setConfig(initialConfig, group, name)\n  }\n\n  public getLogLevel (): LogLevel {\n    return this.logLevel\n  }\n\n  public setLogLevel (logLevel: LogLevel): void {\n    this.logLevel = logLevel\n    this.impl.setLogLevel(logLevel, this.group, this.name)\n  }\n\n  public getName (): string {\n    return this.name\n  }\n\n  public getGroup (): string {\n    return this.group\n  }\n\n  public getImpl (): LoggerImplementation {\n    return this.impl\n  }\n\n  public getMetadata (): any {\n    return this.commonMetadata\n  }\n\n  /**\n     * Sets the metadata object that is gonna be assigned to every future invocation of any log method.\n     *\n     * @param {*} commonMetadata a metadata object - can be undefined or null.\n     * @memberof DefaultLoggerInstance\n     */\n  public setMetadata (commonMetadata: any): void {\n    this.commonMetadata = commonMetadata\n    this.impl.setMetadata(commonMetadata, this.group, this.name)\n  }\n\n  public async trace (...args: any[]): Promise {\n    const metadata = [LogLevel.TRACE, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async debug (...args: any[]): Promise {\n    const metadata = [LogLevel.DEBUG, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async info (...args: any[]): Promise {\n    const metadata = [LogLevel.INFO, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async warn (...args: any[]): Promise {\n    const metadata = [LogLevel.WARN, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async error (...args: any[]): Promise {\n    const metadata = [LogLevel.ERROR, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public getImplementation(): T {\n    return this.impl.getImplementation(this.group, this.name)\n  }\n\n  private async log (logLevel: LogLevel, ...args: any[]): Promise {\n    if (logLevel  {\n    return null\n  }\n\n  public getImplementation(group: string, name: string): T {\n    return null\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    // nothing\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    // nothing\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    // nothing\n  }\n}\n\n/**\n * Used to instance an cache logger instances.\n *\n * @export\n * @class LoggerFactory\n */\nexport class LoggerFactory {\n  /**\n     * Gets a logger from cache or instances a new logger instance with the given group and name.\n     *\n     * @static\n     * @param {string} [group=\"\"] The group of the logger instance\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @returns {ILoggerInstance}\n     * @memberof LoggerFactory\n     */\n  public static getLogger (group = '', name = ''): ILoggerInstance {\n    if (!LoggerFactory.INITIALIZED) {\n      LoggerFactory.INITIALIZED = true\n      LoggerFactory.initialize()\n    }\n\n    const compoundKey = `${group}:${name}`\n    if (LoggerFactory.LOGGER_INSTANCE_CACHE.has(compoundKey)) {\n      return LoggerFactory.LOGGER_INSTANCE_CACHE.get(compoundKey)\n    }\n\n    const instance = new DefaultLoggerInstance(\n      name,\n      group,\n      LoggerConfiguration.getLogLevel(group, name),\n      LoggerFactory.COMMON_METADATA,\n      LoggerFactory.LOGGER)\n    LoggerFactory.LOGGER_INSTANCE_CACHE.set(compoundKey, instance)\n    return instance\n  }\n\n  /**\n     * Clears the logger cache and conditionally resets the logger implementation.\n     *\n     * @static\n     * @param [reinit] Causes the logger implementation to re-instantiate the logger binding if set to true.\n     * @memberof LoggerFactory\n     */\n  public static reset (reinit = false): void {\n    LoggerFactory.LOGGER_INSTANCE_CACHE.clear()\n    if (reinit) {\n      LoggerFactory.INITIALIZED = false\n    }\n  }\n\n  /**\n     * Gets the application-wide metadata object.\n     *\n     * @static\n     * @memberof LoggerFactory\n     */\n  public static getMetadata (): any {\n    return LoggerFactory.COMMON_METADATA\n  }\n\n  /**\n     * Sets the application-wide metadata object for logger instances.\n     *\n     * Every new logger will get the application-wide metadata object set.\n     *\n     * Every logger instance that sets it's own metadata object will be excluded from\n     * future updates of the application-wide metadata object.\n     *\n     * Note that this object is shared. Any changes to it will affect all logger instances\n     * using it.\n     *\n     * @static\n     * @param {*} metadata a metadata object - can be undefined or null.\n     * @memberof LoggerFactory\n     */\n  public static setMetadata (metadata: any): void {\n    const formerData = LoggerFactory.COMMON_METADATA\n    LoggerFactory.COMMON_METADATA = metadata\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      if (logger.getMetadata() === formerData) {\n        logger.setMetadata(LoggerFactory.COMMON_METADATA)\n      }\n    })\n  }\n\n  private static COMMON_METADATA: any = undefined;\n  private static LOGGER: LoggerImplementation = new NullLoggerImplementation();\n  private static ROOT_LOGGER: DefaultLoggerInstance;\n  private static INITIALIZED: boolean = false;\n  private static readonly LOGGER_INSTANCE_CACHE: Map = new Map();\n\n  private static initialize (): void {\n    const BINDINGS = new LoggerBindings().getBindings()\n    const BINDING = BINDINGS[0]\n    if (BINDINGS.length === 0) {\n      console.log('SLF4TS: No Logger Binding found')\n      return\n    }\n    LoggerFactory.LOGGER = BINDING.getLoggerImplementation()\n    LoggerFactory.ROOT_LOGGER = LoggerFactory.getLogger() as DefaultLoggerInstance\n\n    if (BINDINGS.length > 1) {\n      let message = 'multiple bindings found:'\n      BINDINGS.forEach((binding) => {\n        message += `\\n  ${binding.getVendor()} - ${binding.getVersion()}`\n      })\n      message += `\\n  using ${BINDING.getVendor()} - ${BINDING.getVersion()}`\n      LoggerFactory.ROOT_LOGGER.info(message)\n        .catch(console.error)\n    }\n\n    LoggerConfiguration.onLogLevelChanged(LoggerFactory.logLevelChanged)\n    LoggerConfiguration.onConfigChanged(LoggerFactory.configChanged)\n  }\n\n  private static logLevelChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n      if ((groupEmpty && nameEmpty) || (groupMatches && nameEmpty) || (groupMatches && nameMatches)) {\n        logger.setLogLevel(event.logLevel)\n      }\n    })\n  }\n\n  private static configChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const hasNameConfig = LoggerConfiguration.hasConfig(logger.getGroup(), logger.getName())\n      const hasGroupConfig = LoggerConfiguration.hasConfig(logger.getGroup())\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n\n      if ((groupEmpty && nameEmpty && !hasGroupConfig && !hasNameConfig) ||\n                (nameEmpty && groupMatches && !hasNameConfig) ||\n                (groupMatches && nameMatches)) {\n        logger.getImpl().setConfig(event.config, logger.getGroup(), logger.getName())\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerImplementation.html":{"url":"interfaces/LoggerImplementation.html","title":"interface - LoggerImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggerImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n        \n\n            \n                Description\n            \n            \n                The bridge to the underlying logging-framework.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getImplementation\n                                \n                                \n                                    log\n                                \n                                \n                                    setConfig\n                                \n                                \n                                    setLogLevel\n                                \n                                \n                                    setMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \ngetImplementation(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Gets the underlying implementation of the logger.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The group of the logger.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the logger.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            log\n                        \n                        \n                    \n                \n            \n            \n                \nlog(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:23\n                \n            \n\n\n            \n                \n                    Invoked for each call to a logging method of a logger instance.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        array with log-level, group, name and all arguments passed to the logging function.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise completed when the log statement was processed by the underlying logging-framework.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \nsetConfig(config: T, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:44\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Sets the configuration for the specified logger instance.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The implementation-specific configuration.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The group of the logger.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the logger.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \nsetLogLevel(logLevel: LogLevel, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:54\n                \n            \n\n\n            \n                \n                    Informs the logger implementation of the log-level change.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new log level.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The group of the logger.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the logger.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \nsetMetadata(metadata: any, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts:64\n                \n            \n\n\n            \n                \n                    Informs the logger implementation of the metadata change.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new metadata.\n\n                                    \n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The group of the logger.\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the logger.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nimport { LogLevel } from './LoggerConfiguration'\n\n/**\n * The bridge to the underlying logging-framework.\n *\n * @export\n * @interface LoggerImplementation\n */\nexport interface LoggerImplementation {\n\n  /**\n     * Invoked for each call to a logging method of a logger instance.\n     *\n     * @param {...any[]} args array with log-level, group, name and all arguments passed to the logging function.\n     * @returns A Promise completed when the log statement was processed by the underlying logging-framework.\n     * @memberof LoggerImplementation\n     */\n  log(...args: any[]): Promise\n\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @template T Type of logger instance.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  getImplementation(group: string, name: string): T\n\n  /**\n     * Sets the configuration for the specified logger instance.\n     *\n     * @template T Type of config object\n     * @param {T} config The implementation-specific configuration.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setConfig(config: T, group: string, name: string): void\n\n  /**\n     * Informs the logger implementation of the log-level change.\n     *\n     * @param {LogLevel} logLevel The new log level.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setLogLevel(logLevel: LogLevel, group: string, name: string): void\n\n  /**\n     * Informs the logger implementation of the metadata change.\n     *\n     * @param {any} metadata The new metadata.\n     * @param {string} group The group of the logger.\n     * @param {string} name The name of the logger.\n     * @memberof LoggerImplementation\n     */\n  setMetadata(metadata: any, group: string, name: string): void\n\n}\n\n/**\n * A metadata object for a binding.\n *\n * @export\n * @interface LoggerBinding\n */\nexport interface LoggerBinding {\n  /**\n     * Gets the logger implementation.\n     *\n     * @returns {LoggerImplementation} The logger implementation.\n     * @memberof LoggerBinding\n     */\n  getLoggerImplementation(): LoggerImplementation\n  /**\n     * Gets the vendor string.\n     *\n     * @returns {string} The vendor name.\n     * @memberof LoggerBinding\n     */\n  getVendor(): string\n  /**\n     * Gets the version string.\n     *\n     * @returns {string} The version number.\n     * @memberof LoggerBinding\n     */\n  getVersion(): string\n}\n\n/**\n * Encapsulates the loading of logger bindings from NODE_PATH.\n *\n * Additionally the location of other logging-framework bindings can\n * be configured using the environment variable 'LOGGER_BINDING_ADDITIONAL_PATH'.\n *\n * For each folder - containing a file named '.slf4ts-binding' in 'NODE_PATH',\n * 'LOGGER_BINDING_ADDITIONAL_PATH' or the additional search paths given to\n * LoggerBindings - LoggerBindings loads the node-module and invokes the function\n * that is the default export of the entire module for registration.\n *\n * @export\n * @class LoggerBindings\n */\nexport class LoggerBindings {\n  /**\n     * Array of loaded bindings.\n     *\n     * @private\n     * @type {LoggerBinding[]}\n     * @memberof LoggerBindings\n     */\n  private readonly bindings: LoggerBinding[] = [];\n\n  /**\n     * Creates an instance of LoggerBindings.\n     *\n     * @param {string[]} [additionalPaths=[]] A string array with additional paths to search bindings.\n     * @memberof LoggerBindings\n     */\n  public constructor (additionalPaths: string[] = []) {\n    if ('LOGGER_BINDING_ADDITIONAL_PATH' in process.env) {\n      additionalPaths.push(process.env.LOGGER_BINDING_ADDITIONAL_PATH)\n    }\n    if ('mainModule' in process && 'paths' in process.mainModule) {\n      process.mainModule.paths\n        .forEach((mainPath) => additionalPaths.push(mainPath))\n    }\n\n    const moduleFolders: string[] = this.getAllModuleFolders(additionalPaths)\n    const loggerBindings: string[] = this.getAllLoggerBindings(moduleFolders)\n\n    loggerBindings.forEach((binding) => {\n      const registerFunc = require.main.require(binding)\n      registerFunc(this)\n    })\n  }\n\n  /**\n     * Used to register a logging-framework binding.\n     *\n     * @param {LoggerBinding} binding The LoggerBinding to register.\n     * @returns\n     * @memberof LoggerBindings\n     */\n  public registerBinding (binding: LoggerBinding): void {\n    const exists = this.bindings.filter((b) => {\n      const vendorEquals = b.getVendor() === binding.getVendor()\n      const versionEquals = b.getVersion() === binding.getVersion()\n      return vendorEquals && versionEquals\n    }).length > 0\n\n    if (exists) {\n      return\n    }\n\n    this.bindings.push(binding)\n  }\n\n  /**\n     * Gets a copy of all {@link LoggerBinding}\n     *\n     * @returns {LoggerBinding[]}\n     * @memberof LoggerBindings\n     */\n  public getBindings (): LoggerBinding[] {\n    return [].concat(this.bindings)\n  }\n\n  private getAllModuleFolders (additionalPaths: string[]): string[] {\n    const rootPaths: string[] = (module as any).paths\n    const moduleFolders: string[] = []\n\n    rootPaths.concat(additionalPaths).forEach((rootPath) =>\n      this.visitNodeModules(rootPath).forEach((folder) => moduleFolders.push(folder)))\n\n    return moduleFolders\n  }\n\n  private visitNodeModules (rootPath: string): string[] {\n    const moduleFolders: string[] = []\n\n    if (fs.existsSync(rootPath)) {\n      const files = fs.readdirSync(rootPath)\n      files.forEach((folder) => {\n        const absolutePath = path.join(rootPath, folder)\n        moduleFolders.push(absolutePath)\n        this.visitNodeModules(path.join(absolutePath, 'node_modules'))\n          .forEach((subfolder) => moduleFolders.push(subfolder))\n      })\n    }\n\n    return moduleFolders\n  }\n\n  private getAllLoggerBindings (moduleFolders: string[]): string[] {\n    const bindings: string[] = []\n\n    moduleFolders.forEach((moduleFolder) => {\n      if (fs.existsSync(path.join(moduleFolder, '.slf4ts-binding'))) {\n        bindings.push(path.basename(moduleFolder))\n      }\n    })\n\n    return bindings\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NullLoggerImplementation.html":{"url":"classes/NullLoggerImplementation.html","title":"class - NullLoggerImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NullLoggerImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n        \n\n            \n                Description\n            \n            \n                Default/ Dummy logger implementation - does nothing.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerImplementation\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getImplementation\n                            \n                            \n                                    Public\n                                    Async\n                                log\n                            \n                            \n                                    Public\n                                setConfig\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImplementation(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:198\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setConfig(config: T, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:202\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(logLevel: LogLevel, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(metadata: any, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { LoggerBindings, LoggerImplementation } from './LoggerBindings'\nimport { LoggerConfiguration, LogLevel } from './LoggerConfiguration'\n\n/**\n * Interface representing a logger instance.\n *\n * @export\n * @interface ILoggerInstance\n */\nexport interface ILoggerInstance {\n  /**\n     * Logs the given message using TRACE log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  trace(...args: any[]): Promise\n  /**\n     * Logs the given message using DEBUG log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  debug(...args: any[]): Promise\n  /**\n     * Logs the given message using INFO log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  info(...args: any[]): Promise\n  /**\n     * Logs the given message using WARN log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  warn(...args: any[]): Promise\n  /**\n     * Logs the given message using ERROR log-level.\n     *\n     * @param {...args: any[]} [args] messages, metadata and errors to log.\n     * @returns {Promise} A promise completing when the logging-implementation processed the log statement.\n     * @memberof ILoggerInstance\n     */\n  error(...args: any[]): Promise\n  /**\n     * Gets the current log-level.\n     *\n     * @returns {LogLevel} The log-level.\n     * @memberof ILoggerInstance\n     */\n  getLogLevel(): LogLevel\n  /**\n     * Sets the metadata assigned to every future invocation of any of the log-methods.\n     *\n     * @param {*} metadata metadata object - can be undefined or null.\n     * @memberof ILoggerInstance\n     */\n  setMetadata(metadata: any): void\n  /**\n     * Gets the underlying implementation of the logger.\n     *\n     * @memberof ILoggerInstance\n     */\n  getImplementation(): T\n}\n\n/**\n * The standard logger instance implementation.\n *\n * @export\n * @class DefaultLoggerInstance\n * @implements {ILoggerInstance}\n */\nexport class DefaultLoggerInstance implements ILoggerInstance {\n  private readonly impl: LoggerImplementation;\n  private readonly name: string;\n  private readonly group: string;\n  private commonMetadata: any;\n  private logLevel: LogLevel;\n\n  /**\n     * Creates an instance of DefaultLoggerInstance.\n     *\n     * @param {string} name The name of the logger instance.\n     * @param {string} group The group of the logger instance.\n     * @param {LogLevel} logLevel The initial log-level of the logger instance.\n     * @param {commonMetadata} commonMetadata The metadata added automatically to every log operation.\n     * @param {LoggerImplementation} impl The underlying logger implementation.\n     * @memberof DefaultLoggerInstance\n     */\n  public constructor (\n    name: string,\n    group: string,\n    logLevel: LogLevel,\n    commonMetadata: any,\n    impl: LoggerImplementation) {\n    this.impl = impl\n    this.name = name\n    this.group = group\n    this.logLevel = logLevel\n    this.commonMetadata = commonMetadata\n\n    const initialConfig = LoggerConfiguration.getConfig(group, name)\n    this.impl.setConfig(initialConfig, group, name)\n  }\n\n  public getLogLevel (): LogLevel {\n    return this.logLevel\n  }\n\n  public setLogLevel (logLevel: LogLevel): void {\n    this.logLevel = logLevel\n    this.impl.setLogLevel(logLevel, this.group, this.name)\n  }\n\n  public getName (): string {\n    return this.name\n  }\n\n  public getGroup (): string {\n    return this.group\n  }\n\n  public getImpl (): LoggerImplementation {\n    return this.impl\n  }\n\n  public getMetadata (): any {\n    return this.commonMetadata\n  }\n\n  /**\n     * Sets the metadata object that is gonna be assigned to every future invocation of any log method.\n     *\n     * @param {*} commonMetadata a metadata object - can be undefined or null.\n     * @memberof DefaultLoggerInstance\n     */\n  public setMetadata (commonMetadata: any): void {\n    this.commonMetadata = commonMetadata\n    this.impl.setMetadata(commonMetadata, this.group, this.name)\n  }\n\n  public async trace (...args: any[]): Promise {\n    const metadata = [LogLevel.TRACE, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async debug (...args: any[]): Promise {\n    const metadata = [LogLevel.DEBUG, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async info (...args: any[]): Promise {\n    const metadata = [LogLevel.INFO, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async warn (...args: any[]): Promise {\n    const metadata = [LogLevel.WARN, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public async error (...args: any[]): Promise {\n    const metadata = [LogLevel.ERROR, this.group, this.name].concat(...arguments).concat(this.commonMetadata)\n    return this.log.apply(this, metadata)\n  }\n\n  public getImplementation(): T {\n    return this.impl.getImplementation(this.group, this.name)\n  }\n\n  private async log (logLevel: LogLevel, ...args: any[]): Promise {\n    if (logLevel  {\n    return null\n  }\n\n  public getImplementation(group: string, name: string): T {\n    return null\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    // nothing\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    // nothing\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    // nothing\n  }\n}\n\n/**\n * Used to instance an cache logger instances.\n *\n * @export\n * @class LoggerFactory\n */\nexport class LoggerFactory {\n  /**\n     * Gets a logger from cache or instances a new logger instance with the given group and name.\n     *\n     * @static\n     * @param {string} [group=\"\"] The group of the logger instance\n     * @param {string} [name=\"\"] The name of the logger instance.\n     * @returns {ILoggerInstance}\n     * @memberof LoggerFactory\n     */\n  public static getLogger (group = '', name = ''): ILoggerInstance {\n    if (!LoggerFactory.INITIALIZED) {\n      LoggerFactory.INITIALIZED = true\n      LoggerFactory.initialize()\n    }\n\n    const compoundKey = `${group}:${name}`\n    if (LoggerFactory.LOGGER_INSTANCE_CACHE.has(compoundKey)) {\n      return LoggerFactory.LOGGER_INSTANCE_CACHE.get(compoundKey)\n    }\n\n    const instance = new DefaultLoggerInstance(\n      name,\n      group,\n      LoggerConfiguration.getLogLevel(group, name),\n      LoggerFactory.COMMON_METADATA,\n      LoggerFactory.LOGGER)\n    LoggerFactory.LOGGER_INSTANCE_CACHE.set(compoundKey, instance)\n    return instance\n  }\n\n  /**\n     * Clears the logger cache and conditionally resets the logger implementation.\n     *\n     * @static\n     * @param [reinit] Causes the logger implementation to re-instantiate the logger binding if set to true.\n     * @memberof LoggerFactory\n     */\n  public static reset (reinit = false): void {\n    LoggerFactory.LOGGER_INSTANCE_CACHE.clear()\n    if (reinit) {\n      LoggerFactory.INITIALIZED = false\n    }\n  }\n\n  /**\n     * Gets the application-wide metadata object.\n     *\n     * @static\n     * @memberof LoggerFactory\n     */\n  public static getMetadata (): any {\n    return LoggerFactory.COMMON_METADATA\n  }\n\n  /**\n     * Sets the application-wide metadata object for logger instances.\n     *\n     * Every new logger will get the application-wide metadata object set.\n     *\n     * Every logger instance that sets it's own metadata object will be excluded from\n     * future updates of the application-wide metadata object.\n     *\n     * Note that this object is shared. Any changes to it will affect all logger instances\n     * using it.\n     *\n     * @static\n     * @param {*} metadata a metadata object - can be undefined or null.\n     * @memberof LoggerFactory\n     */\n  public static setMetadata (metadata: any): void {\n    const formerData = LoggerFactory.COMMON_METADATA\n    LoggerFactory.COMMON_METADATA = metadata\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      if (logger.getMetadata() === formerData) {\n        logger.setMetadata(LoggerFactory.COMMON_METADATA)\n      }\n    })\n  }\n\n  private static COMMON_METADATA: any = undefined;\n  private static LOGGER: LoggerImplementation = new NullLoggerImplementation();\n  private static ROOT_LOGGER: DefaultLoggerInstance;\n  private static INITIALIZED: boolean = false;\n  private static readonly LOGGER_INSTANCE_CACHE: Map = new Map();\n\n  private static initialize (): void {\n    const BINDINGS = new LoggerBindings().getBindings()\n    const BINDING = BINDINGS[0]\n    if (BINDINGS.length === 0) {\n      console.log('SLF4TS: No Logger Binding found')\n      return\n    }\n    LoggerFactory.LOGGER = BINDING.getLoggerImplementation()\n    LoggerFactory.ROOT_LOGGER = LoggerFactory.getLogger() as DefaultLoggerInstance\n\n    if (BINDINGS.length > 1) {\n      let message = 'multiple bindings found:'\n      BINDINGS.forEach((binding) => {\n        message += `\\n  ${binding.getVendor()} - ${binding.getVersion()}`\n      })\n      message += `\\n  using ${BINDING.getVendor()} - ${BINDING.getVersion()}`\n      LoggerFactory.ROOT_LOGGER.info(message)\n        .catch(console.error)\n    }\n\n    LoggerConfiguration.onLogLevelChanged(LoggerFactory.logLevelChanged)\n    LoggerConfiguration.onConfigChanged(LoggerFactory.configChanged)\n  }\n\n  private static logLevelChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n      if ((groupEmpty && nameEmpty) || (groupMatches && nameEmpty) || (groupMatches && nameMatches)) {\n        logger.setLogLevel(event.logLevel)\n      }\n    })\n  }\n\n  private static configChanged (event: any): void {\n    const groupEmpty = event.group === ''\n    const nameEmpty = event.name === ''\n\n    LoggerFactory.LOGGER_INSTANCE_CACHE.forEach((logger, compoundKey) => {\n      const hasNameConfig = LoggerConfiguration.hasConfig(logger.getGroup(), logger.getName())\n      const hasGroupConfig = LoggerConfiguration.hasConfig(logger.getGroup())\n      const groupMatches = logger.getGroup() === event.group\n      const nameMatches = logger.getName() === event.name\n\n      if ((groupEmpty && nameEmpty && !hasGroupConfig && !hasNameConfig) ||\n                (nameEmpty && groupMatches && !hasNameConfig) ||\n                (groupMatches && nameMatches)) {\n        logger.getImpl().setConfig(event.config, logger.getGroup(), logger.getName())\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WinstonLoggerBinding.html":{"url":"classes/WinstonLoggerBinding.html","title":"class - WinstonLoggerBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WinstonLoggerBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts\n        \n\n            \n                Description\n            \n            \n                LoggerBinding implementation for Winston.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerBinding\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                packageJson\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getLoggerImplementation\n                            \n                            \n                                    Public\n                                getVendor\n                            \n                            \n                                    Public\n                                getVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            packageJson\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLoggerImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLoggerImplementation()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         LoggerImplementation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVendor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVendor()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVersion\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVersion()\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport {\n  LoggerBinding,\n  LoggerImplementation\n} from 'slf4ts-api'\n\nimport { WinstonLoggerImplementation } from './WinstonLoggerImplementation'\n\n/**\n * LoggerBinding implementation for Winston.\n *\n * @export\n * @class WinstonLoggerBinding\n * @implements {LoggerBinding}\n */\nexport class WinstonLoggerBinding implements LoggerBinding {\n  private readonly packageJson: any;\n\n  public constructor () {\n    const modulePath = path.parse(module.filename)\n    let currentDir = path.resolve(modulePath.dir)\n    while (true) {\n      currentDir = path.resolve(path.join(currentDir, '..'))\n      const packageJsonPath = path.resolve(path.join(currentDir, 'package.json'))\n      if (fs.existsSync(packageJsonPath)) {\n        this.packageJson = require(packageJsonPath)\n        break\n      }\n    }\n  }\n\n  public getLoggerImplementation (): LoggerImplementation {\n    return new WinstonLoggerImplementation()\n  }\n\n  public getVendor (): string {\n    return 'Winston'\n  }\n\n  public getVersion (): string {\n    return this.packageJson.version\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WinstonLoggerImplementation.html":{"url":"classes/WinstonLoggerImplementation.html","title":"class - WinstonLoggerImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WinstonLoggerImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts\n        \n\n            \n                Description\n            \n            \n                The actual winston logger implementation.\n\n            \n\n\n            \n                Implements\n            \n            \n                            LoggerImplementation\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                loggers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getImplementation\n                            \n                            \n                                    Private\n                                getLoggerInstance\n                            \n                            \n                                    Public\n                                    Async\n                                log\n                            \n                            \n                                    Public\n                                setConfig\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            loggers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getImplementation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImplementation(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getLoggerInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLoggerInstance(group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     winston.Logger\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setConfig(config: T, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:78\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(logLevel: LogLevel, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logLevel\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMetadata\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMetadata(metadata: any, group: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import 'source-map-support/register'\n\nimport { LoggerImplementation, LogLevel } from 'slf4ts-api'\nimport * as util from 'util'\nimport * as winston from 'winston'\n\nconst LogLevelMapping: string[] = []\n\nLogLevelMapping[LogLevel.TRACE] = 'silly'\nLogLevelMapping[LogLevel.DEBUG] = 'debug'\nLogLevelMapping[LogLevel.INFO] = 'info'\nLogLevelMapping[LogLevel.WARN] = 'warn'\nLogLevelMapping[LogLevel.ERROR] = 'error'\n\n/**\n * The actual winston logger implementation.\n *\n * @export\n * @class WinstonLoggerImplementation\n * @implements {LoggerImplementation}\n */\nexport class WinstonLoggerImplementation implements LoggerImplementation {\n  private readonly loggers: Map = new Map();\n\n  public async log (...args: any[]): Promise {\n    const level: number = arguments[0]\n    const group: string = arguments[1]\n    const name: string = arguments[2]\n    const instance = this.getLoggerInstance(group, name)\n\n    return new Promise((resolve, reject) => {\n      const additionalArguments = [...arguments]\n      additionalArguments.splice(0, 3)\n\n      let callArguments: any[] = [LogLevelMapping[level]]\n      callArguments = callArguments.concat(...additionalArguments)\n      const metaArgs = callArguments.splice(2, callArguments.length - 2)\n      let metaArg: any\n      if (metaArgs && metaArgs.length > 0) {\n        metaArg = {}\n        metaArgs.forEach((meta) => {\n          if (meta) {\n            if (meta instanceof Error) {\n              metaArg = { ...metaArg, stack: util.inspect(meta) }\n            } else if (typeof meta === 'string') {\n              callArguments = callArguments.concat(meta)\n            } else {\n              metaArg = { ...metaArg, ...meta }\n            }\n          }\n        })\n      }\n      if (metaArg) {\n        callArguments = callArguments.concat(metaArg)\n      }\n      /* callArguments = callArguments.concat((err?: any, lvl?: string, msg?: string, meta?: any) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve();\n                }\n            }); */\n\n      if (instance) {\n        instance.log.apply(instance, callArguments)\n      } else {\n        winston.log.apply(winston, callArguments)\n      }\n\n      resolve()\n    })\n  }\n\n  public getImplementation (group: string, name: string): any {\n    return this.getLoggerInstance(group, name)\n  }\n\n  public setConfig(config: T, group: string, name: string): void {\n    const instance = this.getLoggerInstance(group, name)\n\n    if (instance) {\n      instance.configure(config)\n    }\n  }\n\n  public setLogLevel (logLevel: LogLevel, group: string, name: string): void {\n    // nothing to set here ...\n  }\n\n  public setMetadata (metadata: any, group: string, name: string): void {\n    // nothing to set here ...\n  }\n\n  private getLoggerInstance (group: string, name: string): winston.Logger {\n    const compoundKey = `${group}:${name}`\n    let instance: winston.Logger = this.loggers.get(compoundKey)\n\n    if (!instance) {\n      instance = winston.createLogger()\n      this.loggers.set(compoundKey, instance)\n    }\n\n    return instance\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n            \n            class\n            LoggerBindings\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n            \n            interface\n            LoggerBinding\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n            \n            interface\n            LoggerImplementation\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts\n            \n            class\n            LoggerConfigurationImpl\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts\n            \n            variable\n            LoggerConfiguration\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n            \n            class\n            DefaultLoggerInstance\n            \n                14 %\n                (3/21)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n            \n            class\n            LoggerFactory\n            \n                38 %\n                (5/13)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n            \n            class\n            NullLoggerImplementation\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n            \n            interface\n            ILoggerInstance\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                packages/slf4ts-cassandra-log-adapter/lib/slf4ts/CassandraLogAdapter.ts\n            \n            class\n            CassandraLogAdapter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts\n            \n            class\n            ConsoleLoggerBinding\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts\n            \n            class\n            ConsoleLoggerImplementation\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts\n            \n            class\n            Log4JSLoggerBinding\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts\n            \n            class\n            Log4JSLoggerImplementation\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts\n            \n            variable\n            LogLevelMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts\n            \n            class\n            WinstonLoggerBinding\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts\n            \n            class\n            WinstonLoggerImplementation\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts\n            \n            variable\n            LogLevelMapping\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (packages/.../LoggerConfiguration.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            LogLevel enumeration.\n\n                        \n                    \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nslf4ts\nSimple Logging Facade for NodeJS\n\n    \n        \n    \n\n\nThis is the mono-repository for the slf4ts modules.slf4ts modules are a collection of modules abstracting logging for nodejs libraries.  \nModules\n\n\n\nModule\nDescription\nStatus\nLink\n\n\n\n\n\nslf4ts-api\nAPI / interface module\n\n\n  \n\n\nslf4ts-console\nConsole Logger Binding\n\nnodejs console\n  \n\n\nslf4ts-log4js\nlog4js Logger Binding\n\nlog4js\n  \n\n\nslf4ts-winston\nWinston Logger Binding\n\nwinston\n  \n\n\nslf4ts-cassandra-log-adapter\nLog adapter for cassandra nodejs client lib\n\ncassandra-driver\n  \n\n\nslf4ts-elasticsearch-log-adapter\nLog adapter for elasticsearch nodejs client lib\ndeprecated\nelasticsearch\n  \n\n\n\nproject development\ninit / update project (if a new dependency is introduced or an existing is updated):  \npnpm igenerate dependency report:  \n# run 'pnpm run build' before checking dependencies\ndocker-compose run --rm depsrelease packages / publish docs:  \n# check functionality\npnpm i\npnpm run build\n\n# publish docs\nrm -fr docs/\ngit branch -D gh-pages\ngit worktree prune\ngit worktree list\ngit worktree add -b gh-pages docs origin/gh-pages\npnpm run publishDocsLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-api/lib/slf4ts/LoggerBindings.ts\n            \n            \n                100 %\n                (43/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (14/14)\n            \n            \n                100 %\n                (42/42)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts\n            \n            \n                89 %\n                (39/44)\n            \n            \n                81 %\n                (17/21)\n            \n            \n                83 %\n                (10/12)\n            \n            \n                89 %\n                (39/44)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-api/lib/slf4ts/LoggerFactory.ts\n            \n            \n                80 %\n                (71/89)\n            \n            \n                89 %\n                (32/36)\n            \n            \n                65 %\n                (20/31)\n            \n            \n                80 %\n                (71/89)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-cassandra-log-adapter/lib/slf4ts/CassandraLogAdapter.ts\n            \n            \n                89 %\n                (24/27)\n            \n            \n                82 %\n                (14/17)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                89 %\n                (24/27)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-console/lib/slf4ts/ConsoleLoggerBinding.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-console/lib/slf4ts/ConsoleLoggerImplementation.ts\n            \n            \n                100 %\n                (25/25)\n            \n            \n                100 %\n                (16/16)\n            \n            \n                50 %\n                (3/6)\n            \n            \n                100 %\n                (25/25)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerBinding.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts\n            \n            \n                81 %\n                (29/36)\n            \n            \n                50 %\n                (2/4)\n            \n            \n                56 %\n                (5/9)\n            \n            \n                81 %\n                (29/36)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-winston/lib/slf4ts/WinstonLoggerBinding.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /opt/slf4ts/packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts\n            \n            \n                89 %\n                (42/47)\n            \n            \n                72 %\n                (13/18)\n            \n            \n                67 %\n                (6/9)\n            \n            \n                89 %\n                (42/47)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoggerConfiguration   (packages/.../LoggerConfiguration.ts)\n                        \n                        \n                            LogLevelMapping   (packages/.../Log4JSLoggerImplementation.ts)\n                        \n                        \n                            LogLevelMapping   (packages/.../WinstonLoggerImplementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    packages/slf4ts-api/lib/slf4ts/LoggerConfiguration.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LoggerConfiguration\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new LoggerConfigurationImpl()\n                        \n                    \n\n                \n                    \n                        Default configuration instance\n\n                    \n                \n\n            \n        \n\n    packages/slf4ts-log4js/lib/slf4ts/Log4JSLoggerImplementation.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LogLevelMapping\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n\n\n            \n        \n\n    packages/slf4ts-winston/lib/slf4ts/WinstonLoggerImplementation.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LogLevelMapping\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/slf4ts-api.html":{"url":"additional-documentation/slf4ts-api.html","title":"additional-page - slf4ts-api","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nslf4ts-api\nSimple Logging Facade for NodeJS\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nInspired by the popular Java lib SLF4J\nThis project is used to abstract loggingto develop reusable libraries and not force the usageof a certain logging framework.\nIt's meant to be used with nodejs.\nLogLevel\n\nTRACE (numeric value: 4)\nDEBUG (numeric value: 3)\nINFO (numeric value: 2)\nWARN (numeric value: 1)\nERROR (numeric value: 0)\n\nLogger Implementations\nslf4ts doesn't work without a logging-framework binding.Bindings exist for a couple of logging-frameworks:\n\nconsole\nlog4js\nwinston\n\nWrite a binding\nA binding for a logging-framework needs to implement the LoggerBinding interface andthe actual logger interface LoggerImplementation.   \nAlso a file named .slf4ts-binding needs to be present in the package folder (can be empty).   \nA node package for a binding should export a single function that is used during binding discovery.\nInterfaces to implement:\nimport { LogLevel } from \"slf4ts-api\";\n\ninterface LoggerImplementation {\n    log(...args: any[]): Promise;\n    getImplementation(): T;\n    setConfig(config: T, group: string, name: string): void;\n    setLogLevel(logLevel: LogLevel, group: string, name: string): void;\n    setMetadata(metadata: any, group: string, name: string): void;\n}\n\ninterface LoggerBinding {\n    getLoggerImplementation(): LoggerImplementation;\n    getVendor(): string;\n    getVersion(): string;\n}Sample implementation in typescript (index.ts):\nimport { LoggerBindings } from \"slf4ts-api\";\n\nexport default function(bindings: LoggerBindings) {\n    bindings.registerBinding({\n        getLoggerImplementation: () => { ... },\n        getVendor: () => \"My Logger Binding Implementation\",\n        getVersion: () => \"1.0.0\"\n    });\n}\nAn example implementation can be found in the example-node-modules folder of this project.\nUsage\nimport { LoggerConfiguration, LogLevel, LoggerFactory } from \"slf4ts-api\";\n\n// gets the root logger (group \"\" and name \"\")\nconst ROOT_LOGGER = LoggerFactory.getLogger();\n\nclass X {\n\n    // gets a logger with group \"my-lib\" and name \"X\"\n    private static LOG = LoggerFactory.getLogger(\"my-lib\", \"X\");\n\n    public async something(value: any) {\n        // log with debug level and some metadata\n        X.LOG.debug(`a message with ${value}`, { additionalData: \"Testvalue\" });\n\n        try {\n            ...\n        } catch(error: Error) {\n            // logs an error without metadata\n            X.LOG.error('Error!', error);\n        }\n    }\n\n}\n\n// sets the log level of all loggers\nLoggerConfiguration.setLogLevel(LogLevel.INFO);\n\n// sets the log level of all loggers within group \"my-lib\"\nLoggerConfiguration.setLogLevel(LogLevel.WARN, \"my-lib\");\n\n// sets the log level of the logger with group \"my-lib\" and name \"X\"\nLoggerConfiguration.setLogLevel(LogLevel.ERROR, \"my-lib\", \"X\");\n\nconst config = {\n    transports: [...],\n    events: [...],\n    postProcessor: () => { ... }\n};\n\n// sets the config of all loggers\nLoggerConfiguration.setConfig(config);\n\n// sets the config of all loggers within group \"my-lib\"\nLoggerConfiguration.setConfig(config, \"my-lib\");\n\n// sets the config of the logger with group \"my-lib\" and name \"X\"\nLoggerConfiguration.setConfig(config, \"my-lib\", \"X\");License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/slf4ts-cassandra-log-adapter.html":{"url":"additional-documentation/slf4ts-cassandra-log-adapter.html","title":"additional-page - slf4ts-cassandra-log-adapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nslf4ts-cassandra-log-adapter\nCassandra Logging-Adapter for slf4ts\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis project forwards log events from datastax cassandra driver to slf4ts logger implementation.It's s meant to be used with nodejs.\nUsage\nimport { ILoggerInstance, LoggerFactory } from \"slf4ts-api\";\n\n// create an instance of Client\nconst client = new Client({ contactPoints: [\"127.0.0.1:9042\"] });\n\n// Create an instance of the logging adapter for each client\n// creates/uses a logger with group \"cassandra\" and the keyspace of the client as name (empty string if not configured) \nnew CassandraLogAdapter(client);\n\n// Create an instance of the logging adapter with a pre-created logger instance\nconst logger: ILoggerInstance = LoggerFactory.getLogger(\"my-cassandra\");\nnew CassandraLogAdapter(client, logger);\n\n// use the client as usual\nclient.connect(() => {\n    ...\n});\n\n// access the underlying logger instance\nconst logger: ILoggerInstance = LoggerFactory.getLogger(\"cassandra\", client.keyspace);\nlogger.setLogLevel(...);License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/slf4ts-console.html":{"url":"additional-documentation/slf4ts-console.html","title":"additional-page - slf4ts-console","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nslf4ts-console\nConsole Logging-Binding for slf4ts\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nIt's meant to be used with nodejs.\nExample Usage\nExample package.json:\n{\n    ...,\n    \"dependencies\": {\n        \"slf4ts-console\": \"latest\"\n    },\n    ...\n}Example code:\nimport { LoggerFactory } from \"slf4ts-api\";\n\nconst ROOT_LOGGER = LoggerFactory.getLogger();\nROOT_LOGGER.setMetadata({ application: 'my-app' });\n\nROOT_LOGGER.info(\"Test Message\", { version: '1.0.0' }, new Error());Example output:\n2017-01-01T12:00:00.999Z ROOT INFO Test Message { application: 'my-app', version: '1.0.0' } Error\n    at ConsoleLoggerImplementationTest.checkArgumentPassing (.../slf4ts-console/test/slf4ts/ConsoleLoggerImplementationTest.ts:XXX:XXX)\n    at License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/slf4ts-log4js.html":{"url":"additional-documentation/slf4ts-log4js.html","title":"additional-page - slf4ts-log4js","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nslf4ts-log4js\nlog4js Logging-Binding for slf4ts\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nIt's meant to be used with nodejs.\nExample Usage\nExample package.json:\n{\n    ...,\n    \"dependencies\": {\n        \"slf4ts-log4js\": \"latest\"\n    },\n    ...\n}Example code:\nimport { configure } from \"log4js\";\nimport { LoggerFactory, LoggerConfiguration } from \"slf4ts-api\";\n\nconst ROOT_LOGGER = LoggerFactory.getLogger();\nROOT_LOGGER.setMetadata({ application: 'my-app' });\n\n// configure log4js as usual\nconfigure({\n  appenders: {\n    out: { type: 'stdout' },\n    app: { type: 'file', filename: 'application.log' }\n  },\n  categories: {\n    default: { appenders: [ 'out', 'app' ], level: 'debug' }\n  }\n});\n\n/**\n * prints something like:\n * \n *      [2020-01-01T11:22:33.444] [INFO] default - Test Message { version: '1.0.0' } Error: \n *          at Object. (...)\n *          at Module._compile (internal/modules/cjs/loader.js:1151:30)\n *          at Object.Module._extensions..js (internal/modules/cjs/loader.js:1171:10)\n *          at Module.load (internal/modules/cjs/loader.js:1000:32)\n *          at Function.Module._load (internal/modules/cjs/loader.js:899:14)\n *          at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\n *          at internal/main/run_main_module.js:17:47\n * \n * { application: 'my-app' } (metadata set above) is present in the context of the logger.\n */\nROOT_LOGGER.info(\"Test Message\", { version: '1.0.0' }, new Error());License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/slf4ts-winston.html":{"url":"additional-documentation/slf4ts-winston.html","title":"additional-page - slf4ts-winston","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nslf4ts-winston\nWinston Logging-Binding for slf4ts\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nIt's meant to be used with nodejs.\nCurrently not supported:\n\nusing custom log-levels\n\nExample Usage\nExample package.json:\n{\n    ...,\n    \"dependencies\": {\n        \"slf4ts-winston\": \"latest\"\n    },\n    ...\n}Example code:\nimport { LoggerFactory, LoggerConfiguration } from \"slf4ts-api\";\n// register winston third-party-lib\nimport \"winston-daily-rotate-file\";\n\nconst ROOT_LOGGER = LoggerFactory.getLogger();\nROOT_LOGGER.setMetadata({ application: 'my-app' });\n\nROOT_LOGGER.info(\"Test Message\", { version: '1.0.0' }, new Error());\n\n// configuration for winston loggers\nconst config = {\n    transports: [\n        new (winston.transports.Console)(),\n        new (winston.transports.File)({ filename: 'somefile.log' }),\n        new (winston.transports.DailyRotateFile)({\n            \"filename\": \"logfilename-%DATE%.log\",\n            \"datePattern\": \"YYYY-MM-DD\",\n            \"logstash\": true,\n            \"level\": \"debug\"\n        })\n    ]\n};\n\n// configure the root logger ...\nLoggerConfiguration.setConfig(config);\n\n// configure a certain logger\nLoggerConfiguration.setConfig(config, \"my-lib\", \"X\");License\nMIT\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
